vModel := class 
{
	memObjs := TVkMemoryObject^[2]
	hndls := VkBuffer[2]
	indexCount := int
	ReqShader := vShader^
	ReqTexture := TVkTexture^

	physType := char^
	physExtraData := void^

	vertexInfo := vShaderVertexOptions

	indexType := VKType

	PhysModel := PhysCommon^

	vertexMemory := TVkMemBuffer^
	indexMemory := TVkMemBuffer^


	LoadFile := !(vRepoFile^ itFl) -> bool
	{
		rFile := new RawModel
		if not rFile.LoadFromFile(itFl)
			return false

		vertexInfo.positionType = rFile.PositionType
		vertexInfo.normalType = rFile.NormalType
		vertexInfo.textureType = rFile.UVType
	
		indexType = rFile.IndexType
		indexCount = rFile.IndexCount
		
		vertSize :=  rFile.VertexCount*rFile.GetVertSize()
		vertexMemory = vk.CreateMemBufferObject(vertSize,VK_BUFFER_USAGE_VERTEX_BUFFER_BIT or_b VK_BUFFER_USAGE_TRANSFER_DST_BIT)
		vertexMemory.TransferData(TArraySpan.{u8}(rFile.verts->{u8^},vertSize))


		indSize := rFile.IndexCount*rFile.IndexType.GetSize()
		indexMemory = vk.CreateMemBufferObject(indSize,VK_BUFFER_USAGE_INDEX_BUFFER_BIT or_b VK_BUFFER_USAGE_TRANSFER_DST_BIT)
		indexMemory.TransferData(TArraySpan.{u8}(rFile.inds->{u8^},indSize))
	}
	DestroyVK := !() -> void
	{
	}
	AddToCmdBuffer := !(VkCommandBuffer cmdB) -> void
	{
		offsets := VkDeviceSize

		vk.Funcs.vkCmdBindVertexBuffers(cmdB,0,1,vertexMemory.GetBufferPointer(),offsets&)
		vk.Funcs.vkCmdBindIndexBuffer(cmdB,indexMemory.GetBufferPointer()^,0,indexType.GetBaseIndexType())
		vk.Funcs.vkCmdDrawIndexed(cmdB,indexCount,1,0,0,0)
	}
	
}
