vModel := class 
{
	memObjs := TVkMemoryObject^[2]
	hndls := VkBuffer[2]
	indexCount := int
	ReqShader := vShader^
	ReqTexture := TVkTexture^

	physType := char^
	physExtraData := void^

	vertexInfo := vShaderVertexOptions

	indexType := VKType

	PhysModel := PhysCommon^


	LoadFile := !(vRepoFile^ itFl) -> bool
	{
		rFile := new RawModel
		if not rFile.LoadFromFile(itFl)
			return false

		//rFile.CheckSupport()

		vertexInfo.positionType = rFile.PositionType
		vertexInfo.normalType = rFile.NormalType
		vertexInfo.textureType = rFile.UVType
	
		indexType = rFile.IndexType
		indexCount = rFile.IndexCount
		
		vertSize :=  rFile.VertexCount*rFile.GetVertSize()

		bufC := VkBufferCreateInfo()
		bufC.size = vertSize
		bufC.usage = VK_BUFFER_USAGE_VERTEX_BUFFER_BIT or_b VK_BUFFER_USAGE_TRANSFER_DST_BIT
		bufC.sharingMode = VK_SHARING_MODE_EXCLUSIVE

		memInfo := VkMemoryRequirements

		vk.Funcs.vkCreateBuffer(vk.LogicalDevice,bufC&,null,hndls[0]&)
		vk.Funcs.vkGetBufferMemoryRequirements(vk.LogicalDevice,hndls[0],memInfo&)
		isVertGpu := bool
		memObjs[0] = vk.CreateMemoryObject(memInfo.size,memInfo.memoryTypeBits,isVertGpu&)
		
		vk.Funcs.vkBindBufferMemory(vk.LogicalDevice,hndls[0],memObjs[0].Get(),0)

		memO := memObjs[0]
		if isVertGpu
			memO = vk.itStageMemory

		memPoint := memO.Map()
		memcpy(memPoint,rFile.verts,vertSize)
		memO.Unmap()

		if isVertGpu
			vStageCpyToBuffer(hndls[0],vertSize)
		indSize := rFile.IndexCount*rFile.IndexType.GetSize()
		bufC.size = indSize
		bufC.usage = VK_BUFFER_USAGE_INDEX_BUFFER_BIT or_b VK_BUFFER_USAGE_TRANSFER_DST_BIT
		vk.Funcs.vkCreateBuffer(vk.LogicalDevice,bufC&,null,hndls[1]&)
		vk.Funcs.vkGetBufferMemoryRequirements(vk.LogicalDevice,hndls[1],memInfo&)

		isIndGpu := bool
		memObjs[1] = vk.CreateMemoryObject(memInfo.size,memInfo.memoryTypeBits,isIndGpu&)

		vk.Funcs.vkBindBufferMemory(vk.LogicalDevice,hndls[1],memObjs[1].Get(),0)

		memO2 := memObjs[1]
		if isIndGpu
			memO2 = vk.itStageMemory
		memPoint = memO2.Map()
		memcpy(memPoint,rFile.inds->{void^},indSize)
		memO2.Unmap()
		if isIndGpu
		{
			assert(false)
			//vStageCpyToBuffer(hndls[1],indSize)
		}
	}
	DestroyVK := !() -> void
	{
		vk.Funcs.vkDestroyBuffer(vk.LogicalDevice,hndls[0],null)
		vk.Funcs.vkDestroyBuffer(vk.LogicalDevice,hndls[1],null)
		memObjs[0].DestroyVK()
		memObjs[1].DestroyVK()
	}
	AddToCmdBuffer := !(VkCommandBuffer cmdB) -> void
	{
		offsets := VkDeviceSize
		vk.Funcs.vkCmdBindVertexBuffers(cmdB,0,1,hndls[0]&,offsets&)
		vk.Funcs.vkCmdBindIndexBuffer(cmdB,hndls[1],0,indexType.GetBaseIndexType())
		vk.Funcs.vkCmdDrawIndexed(cmdB,indexCount,1,0,0,0)
	}
	
}
