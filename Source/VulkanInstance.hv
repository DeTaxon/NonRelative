VulkanInstance := class extend TGCObject
{
	Instance := void^

	Init := !() -> void
	{
		innerLoadVKFuncs()

		count := u32

		vkEnumerateInstanceLayerProperties(count&,null)
		lays := Vector.{VkLayerProperties}(count->{int})
		vkEnumerateInstanceLayerProperties(count&,lays.Get())

		vkEnumerateInstanceExtensionProperties(null,count&,null)
		exts := Vector.{VkExtensionProperties}(count->{int})
		vkEnumerateInstanceExtensionProperties(null,count&,exts.Get())

		usingLayers := List.{char^}
		usingExtensions := List.{char^}

		LayerStep(lays&,usingLayers)
		ExtensionStep(exts&,usingExtensions)

		appInfo := VkApplicationInfo()

		AppInfoStep(appInfo)

		instCr := VkInstanceCreateInfo()
		instCr.pApplicationInfo = appInfo&

		setLayers := usingLayers.ToVector()
		setExtensions := usingExtensions.ToVector()

		instCr.enabledLayerCount = setLayers.Size()
		instCr.ppEnabledLayerNames = setLayers.Get()
		instCr.enabledExtensionCount = setExtensions.Size()
		instCr.ppEnabledExtensionNames = setExtensions.Get()
		createRes := vkCreateInstance(instCr&,null,Instance&)
	}
	LayerStep := virtual !(VkLayerProperties[] supportedLayers, List.{char^} usingLayers) -> void
	{
	}
	ExtensionStep := virtual !(VkExtensionProperties[] supportedExtensions, List.{char^} usingExtensions) -> void
	{
	}
	AppInfoStep := virtual !(VkApplicationInfo appInfo) -> void
	{
	}
}



vkLib := Library^
innerLoadVKFuncs := !() -> void
{
	if vkLib != null
		return void
	vkLib = GetLibrary("libvulkan.so") 

	vkGetInstanceProcAddr = vkLib.Get("vkGetInstanceProcAddr")->{PFN_vkGetInstanceProcAddr}
	vkEnumerateInstanceExtensionProperties = vkGetInstanceProcAddr(null,"vkEnumerateInstanceExtensionProperties")->{PFN_vkEnumerateInstanceExtensionProperties}
	vkEnumerateInstanceLayerProperties = vkGetInstanceProcAddr(null,"vkEnumerateInstanceLayerProperties")->{PFN_vkEnumerateInstanceLayerProperties}
	vkCreateInstance = vkGetInstanceProcAddr(null,"vkCreateInstance")->{PFN_vkCreateInstance}
}
