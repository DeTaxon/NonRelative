TEngine := class extend TGCObject
{

	LoadMap := !(StringView charPath) -> vMap^
	{
		return LoadMap(FSGetFile(charPath))
	}
	LoadMap := !(vRepoFile^ inFile) -> vMap^
	{
		mp := inFile.GetMap()

		js := new Json
		js.ParseString(mp.Get(),mp.Size())

		result = new vMap

		for it, ind : js
		{
			switch ind
			{
			case "props"
				assert(it.IsArray()) //TODO
				for prop : it
				{
					assert(prop.IsRecord()) //TODO
					for propInfo, propInfoInd : prop
					{
						if propInfoInd == "model"
						{
							if propInfo.IsRecord()
							{
								mdl := LoadModel(inFile,propInfo)	
								newProp := CreateProp(mdl)
								result.mapProps.Push(newProp)
							}else if propInfo.IsField()
							{
								//TODO
							}else{
								assert(false) //TODO emit error
							}
						}
					}
				}
			}
		}
	}

	LoadMesh := !(StringView charPath) -> vModel^
	{
		return LoadMesh(FSGetFile(charPath))
	}
	LoadMesh := !(vRepoFile^ inFile) -> vModel^
	{
		result = new vModel
		result.LoadFile(inFile)
	}


	LoadModel := !(StringView charPath) -> vModel^
	{
		return LoadModel(FSGetFile(charPath))
	}
	LoadModel := !(vRepoFile^ inFile) -> vModel^
	{
		js := new Json

		mp := inFile.GetMap()

		js.ParseString(mp.Get(),inFile.Size())

		return LoadModel(inFile,js)
	}
	LoadModel := !(vRepoFile^ inFile,JsonNode^ js) -> vModel^
	{
		result = new vModel
		
		for it,ind  : js
		{
			switch ind
			{
				case "mesh"
					result.LoadFile(inFile.GetFile(it.Value()))
				case "texture"
					result.ReqTexture = LoadTexture(inFile.GetFile(it.Value()))
				case "phys"
					assert(it.IsRecord())
					switch it^[StringSpan("type")&].Value()
					{
					case "hmap"
						hFile := inFile.GetFile(it^[StringSpan("file")&].Value())
						mapFile := RawModel
						mapFile.LoadFromFile(hFile)

						physMap := new PhysHeightMap()
						physMap.CreateDots(mapFile&)
						result.PhysModel = physMap->{PhysCommon^}
					}
				case void
					assert(false)
			}
		}

	}

	CreateProp := !(vModel^ inModel) -> vProp^
	{
		result = new vProp()
		result.itModel = inModel
		result.PhysModel = inModel.PhysModel

		newSetCR := VkDescriptorSetAllocateInfo()
		newSetCR.descriptorPool = gObjectLayoutSets
		newSetCR.descriptorSetCount = 1
		newSetCR.pSetLayouts = vkPerObjectLayout&
		modelTextureSet := VkDescriptorSet

		vk.Funcs.vkAllocateDescriptorSets(vk.LogicalDevice,newSetCR&,result.modelTextureSet&) //TODO
		vSetTexture(result.modelTextureSet,inModel.ReqTexture,gSamplerNearest)
	}


	LoadTexture := !(StringView charPath) -> TVkTexture^
	{
		return LoadTexture(FSGetFile(charPath))
	}
	LoadTexture := !(vRepoFile^ inFile) -> TVkTexture^
	{
		result = vk.CreateTexture() //TODO
		result.CreateTexture(inFile)
	}
}
