
vMapLink := class
{
	relativePos := centf
	linkFrom := vMap^
	linkTo := vMap^
}


vMap := class extend TGCObject
{
	mapName := char^
	mapProps := List.{vProp^}

	//AddProp := !(char^ modelName) -> vProp^
	//{
	//	itMod := vGetModel(modelName)
	//	if itMod == null return null
	//	return vAddProp(itMod,this&)
	//}
}

LinkMaps := !(vMap^ from, vMap^ to, vec4f posOffset, quantf angOffset = quantf(0.0,0.0,0.0,1.0)) -> void
{
	newLink := new vMapLink
	newLink.linkFrom = from
	newLink.linkTo = to
	newLink.relativePos.ang = angOffset
	newLink.relativePos.pos = posOffset

	linksToMap[to].Push(newLink)
	linksFromMap[from].Push(newLink)
}

DrawMap := !(CmdBuffer^ cmd,vMap^ hm,centf offset, int depth) -> void
{
	if depth <= 0
		return void

	for it : hm.mapProps
	{
		it.Draw(cmd,gCam^,offset) //TODO gCam
	}
	for it : linksFromMap[hm]
	{
		newPos := offset<*>it.relativePos
		DrawMap(cmd,it.linkTo,newPos,depth-1)
	}
	for it : linksToMap[hm]
	{	
		newPos := offset<*>it.relativePos.Inverse()
		DrawMap(cmd,it.linkFrom,newPos,depth - 1)
	}
}


linksToMap := AVLMap.{vMap^,List.{vMapLink^}}
linksFromMap := AVLMap.{vMap^,List.{vMapLink^}}
