VulkanInstance := class extend TGCObject
{
	Instance := void^
	Funcs := VulkanFunctionsClass^

	PhysicalDevice := VkPhysicalDevice
	LogicalDevice := VkDevice

	DrawQueue := VkQueue
	TransferQueue := VkQueue

	Init := !() -> void
	{
		innerLoadVKFuncs()

		Funcs = new VulkanFunctionsClass

		count := u32

		vkEnumerateInstanceLayerProperties(count&,null)
		lays := Vector.{VkLayerProperties}(count->{int})
		vkEnumerateInstanceLayerProperties(count&,lays.Get())

		vkEnumerateInstanceExtensionProperties(null,count&,null)
		exts := Vector.{VkExtensionProperties}(count->{int})
		vkEnumerateInstanceExtensionProperties(null,count&,exts.Get())

		usingLayers := List.{char^}
		usingExtensions := List.{char^}

		LayerStep(lays&,usingLayers) //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< LayerStep
		ExtensionStep(exts&,usingExtensions) //<<<<<<<<<<<<<<<<<<<<<< ExtensionStep

		appInfo := VkApplicationInfo()

		AppInfoStep(appInfo)

		instCr := VkInstanceCreateInfo()
		instCr.pApplicationInfo = appInfo&

		setLayers := usingLayers.ToVector()
		setExtensions := usingExtensions.ToVector()

		instCr.enabledLayerCount = setLayers.Size()
		instCr.ppEnabledLayerNames = setLayers.Get()
		instCr.enabledExtensionCount = setExtensions.Size()
		instCr.ppEnabledExtensionNames = setExtensions.Get()
		createRes := vkCreateInstance(instCr&,null,Instance&) //<<<<<<<<<<<<<<<<<<<<<<<<<<< CreateInstance

		for fnc , fncName : Funcs->AllFields
		{
			fnc&->{void^^}^ = vkGetInstanceProcAddr(Instance,fncName)
			//printf("GetInstClass %p %s\n",fnc,fncName)
		}

		DebugStep() //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<DebugStep

		devCount := u32
		Funcs.vkEnumeratePhysicalDevices(Instance,devCount&,null)
		devs := Vector.{VkPhysicalDevice}(devCount)
		Funcs.vkEnumeratePhysicalDevices(Instance,devCount&,devs.Get())
		
		numDevice := DeviceSelectStep(devs&) //TODO check if bad  //<<<<<<<<<<<<<<<<<<<<<<<<< DeviceSelectStep
		
		PhysicalDevice = devs[numDevice]

		devExts := Vector.{VkExtensionProperties}
		devSupports := AVLSet.{char^}

		devExtsCount := u32
		Funcs.vkEnumerateDeviceExtensionProperties(PhysicalDevice,null,devExtsCount&,null)
		if devExtsCount != 0
		{
			devExts.Resize(devExtsCount)
			Funcs.vkEnumerateDeviceExtensionProperties(PhysicalDevice,null,devExtsCount&,devExts.Get())
		}


		physExts := List.{char^}

		DeviceExtensionStep(devExts&,physExts)

		usingPhysExts := physExts.ToVector()

		queueCreateInf := VkDeviceQueueCreateInfo()
		queueCreateInf.queueFamilyIndex = 0 //TODO what is that?
		zeroPrior := float
		zeroPrior = 0.0
		queueCreateInf.queueCount = 1 //TODO what is that?
		queueCreateInf.pQueuePriorities = zeroPrior&
		
		zeroFeature := VkPhysicalDeviceFeatures //TODO what is that?

		logDevice := VkDeviceCreateInfo()

		logDevice.queueCreateInfoCount = 1
		logDevice.pQueueCreateInfos = queueCreateInf&
		logDevice.enabledLayerCount = 0 // usingLayers.Size() //TODO
		logDevice.ppEnabledLayerNames = null //usingLayers.Get() //TODO
		logDevice.enabledExtensionCount = usingPhysExts.Size()
		logDevice.ppEnabledExtensionNames = usingPhysExts.Get()->{char^}
		logDevice.pEnabledFeatures = zeroFeature&

		res11 := Funcs.vkCreateDevice(PhysicalDevice,logDevice&,null,LogicalDevice&)

		Funcs.vkGetDeviceQueue(LogicalDevice,0,0,DrawQueue&)
		TransferQueue = DrawQueue
	}
	
	itStageMemory := TVkMemoryObject^
	itStageMemoryBuffer := VkBuffer
	initCreateStageMemory := !() -> void
	{
    		stSize := 0x4c4c00
    		bufC := VkBufferCreateInfo()
    		bufC.size = stSize
    		bufC.usage = VK_BUFFER_USAGE_TRANSFER_SRC_BIT
    		bufC.sharingMode = VK_SHARING_MODE_EXCLUSIVE
    		Funcs.vkCreateBuffer(LogicalDevice,bufC&,null,itStageMemoryBuffer&)
    		memInfo := VkMemoryRequirements
    		Funcs.vkGetBufferMemoryRequirements(LogicalDevice,itStageMemoryBuffer,memInfo&)
    		itStageMemory = CreateMemoryObject(stSize,memInfo.memoryTypeBits,null)
    		Funcs.vkBindBufferMemory(LogicalDevice,itStageMemoryBuffer,itStageMemory.Get(),0)
	}

	LayerStep := virtual !(VkLayerProperties[] supportedLayers, List.{char^} usingLayers) -> void { assert(false) }
	ExtensionStep := virtual !(VkExtensionProperties[] supportedExtensions, List.{char^} usingExtensions) -> void { assert(false) }
	AppInfoStep := virtual !(VkApplicationInfo appInfo) -> void { assert(false) }
	DebugStep := virtual !() -> void { assert(false) }
	DeviceSelectStep := virtual !(VkPhysicalDevice[] deviceList) -> int { assert(false) }
	DeviceExtensionStep := virtual !(VkExtensionProperties[] deviceExtensions, List.{char^} expectDeviceExtensions) -> void { assert(false) }
}




