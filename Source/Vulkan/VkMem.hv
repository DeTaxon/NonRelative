AlignUp := !(int value, int align) -> int
{
	assert(align != 0)
	extra := value mod align
	if extra != 0
		value += align - extra
	return value
}

AppendClass VulkanInstance
{
	CreateMemoryObject := !(int size, int memType,VulkanMemoryInfo^^ memInfo) -> TVkMemoryObject^
	{
		result = new TVkMemoryObject
		result.CreateObject(this&,size,memType,memInfo)
	}
}

TVkMemoryObject := class
{
	itInstance := VulkanInstance^
	memObj := VkDeviceMemory
	objSize := int
	gpuSize := int
	gpuSide := bool

	CreateObject := !(VulkanInstance^ inst,int size,int memType, VulkanMemoryInfo^^ memInfo) -> bool
	{
		itInstance = inst

		bestMemory := VulkanMemoryInfo^
		if (memType == 0)
		{
			assert(false) //TODO
			//memId = gHostMem[0]
			//gpuSide = false
		}else
		{
			for it : itInstance.DeviceMemory
			{
				if ((1 shl it.index) and_b memType) == 0
					continue

				if bestMemory == null or bestMemory.heapSize < it.heapSize
					bestMemory = it
			}
			if bestMemory != null
			{
				for it : itInstance.HostMemory
				{
					if ((1 shl it.index) and_b memType) == 0
						continue

					if bestMemory == null or bestMemory.heapSize < it.heapSize
						bestMemory = it
				}
			}
		}

		memInfo?^ = bestMemory

		gpuSize = size

		allc1 := VkMemoryAllocateInfo()
		allc1.allocationSize =  gpuSize
		allc1.memoryTypeIndex = bestMemory.index

		inst.Funcs.vkAllocateMemory(inst.LogicalDevice,allc1&,null,memObj&)
		objSize = gpuSize
		return true
	}
	Destroy := virtual !() -> void //TODO double Destroy
	{
		itInstance.Funcs.vkFreeMemory(itInstance.LogicalDevice, memObj,null)
	}
	Map := !() -> void^
	{
		memToRet := void^
		itInstance.Funcs.vkMapMemory(itInstance.LogicalDevice,memObj,0,gpuSize,0,memToRet&)
		return memToRet
		
	}
	Unmap := !() -> void
	{
		flushRange := VkMappedMemoryRange()
		flushRange.memory = memObj
		flushRange.offset = 0
		flushRange.size = objSize
		itInstance.Funcs.vkFlushMappedMemoryRanges(itInstance.LogicalDevice,1,flushRange&)
		itInstance.Funcs.vkUnmapMemory(itInstance.LogicalDevice,memObj)
	}
	Get := !() -> VkDeviceMemory
	{
		return memObj
	}
}

