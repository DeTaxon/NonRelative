AppendClass VulkanInstance
{
	CreateLayout := !(VKType[] vInput,TShaderSet^[] sets, TPushConstant^[] cnsts) -> TShaderInput^
	{
		result = new TShaderInput
		result.itInstance = this&
		result.CreateInput(vInput,sets,cnsts)
	}
}


TShaderInput := class 
{
	itInstance := VulkanInstance^
	itLayout := VkPipelineLayout

	vertexInput := HybridQueue.{VKType,6}
	itSets := Vector.{TShaderSet^}

	Get := !() -> VkPipelineLayout
	{
		return itLayout
	}

	CreateInput := !(VKType[] vInput,TShaderSet^[] sets,TPushConstant^[] cnsts) -> void
	{

		for it : vInput
			vertexInput.Push(it)
		for it : sets
			it.Create(itInstance)

		itSets.Resize(sets.Size())
		for it,i : sets
			itSets[i] = it

		vkPerObjectLayout = itSets[1].Get()

		assert(sets.Size() <= 10)
		layouts := void^[10]
		layouts[i] = sets[^i].Get()

		cnstsPtr := void^
		cnstsVec := Vector.{VkPushConstantRange}

		if cnsts.Size() != 0
		{
			if cnsts.Size() == 1
			{
				cnstsPtr = cnsts[0].Get()
			}else{
				cnstsVec.Resize(cnsts.Size())
				cnstsPtr = cnstsVec.GetPointer()
				for i : cnsts.Size()
				{
					cnstsVec[i].stageFlags = cnsts[i].Get().stageFlags
					cnstsVec[i].offset = cnsts[i].Get().offset
					cnstsVec[i].size = cnsts[i].Get().size
				}
			}
		}
	
		ppC := VkPipelineLayoutCreateInfo()
		ppC.pushConstantRangeCount = 1
		ppC.pPushConstantRanges&->{void^^}^ = cnstsPtr->{void^}
		ppC.setLayoutCount = 2
		ppC.pSetLayouts&->{void^^}^ = layouts&->{void^}
	
		itInstance.Funcs.vkCreatePipelineLayout(vkLogCard,ppC&,null,itLayout&)
	}
	CreateDescriptorPool := !(int setIndex,int poolSize) -> TDescriptorPool^
	{
		return new TDescriptorPool(this&,setIndex,poolSize)
	}

	CreateShader := !(vRepoFile^ vertFile, vRepoFile^ fragFile) -> vShader^
	{
		vrtObj := LoadShaderModule2(vertFile)
		fragObj := LoadShaderModule2(fragFile)

		vert := vrtObj.Get()
		frag := fragObj.Get()

		sStg := VkPipelineShaderStageCreateInfo[2]
		sStg[^].sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO

		sStg[0].stage = VK_SHADER_STAGE_VERTEX_BIT
		sStg[0].module = vert
		sStg[0].pName&->{void^^}^ = "main"
		sStg[1].stage = VK_SHADER_STAGE_FRAGMENT_BIT
		sStg[1].module = frag
		sStg[1].pName&->{void^^}^ = "main"


		inputsBind := VkVertexInputBindingDescription
		inputsBind.binding = 0
		inputsBind.inputRate = VK_VERTEX_INPUT_RATE_VERTEX

		assert(vertexInput.Size() <= 10)
		offset := 0
		inputsStuf := VkVertexInputAttributeDescription[10]

		for i : vertexInput.Size() //TODO for it,i
		{
			it := vertexInput[i]

			inputsStuf[i].location = i
			inputsStuf[i].binding = inputsBind.binding
			inputsStuf[i].format = it.GetVKType()
			inputsStuf[i].offset = offset
			offset += it.GetSize()
		}
	
		inputsBind.stride = offset

		plC := VkPipelineVertexInputStateCreateInfo()

		plC.vertexBindingDescriptionCount = 1
		plC.pVertexBindingDescriptions&->{void^^}^ = inputsBind&
		plC.vertexAttributeDescriptionCount = 3 //TODO non number
		plC.pVertexAttributeDescriptions&->{void^^}^ = inputsStuf[0]&

		paC1 := VkPipelineInputAssemblyStateCreateInfo()
		paC1.topology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST

		stts := VkDynamicState[2]
		stts[0] = VK_DYNAMIC_STATE_VIEWPORT
		stts[1] = VK_DYNAMIC_STATE_SCISSOR

		dins := VkPipelineDynamicStateCreateInfo()
		dins.dynamicStateCount = 2
		dins.pDynamicStates = stts[0]&

		pVSC := VkPipelineViewportStateCreateInfo()
		pVSC.viewportCount = 1
		pVSC.pViewports = null
		pVSC.scissorCount = 1
		pVSC.pScissors = null

		rasterC := VkPipelineRasterizationStateCreateInfo()
		rasterC.polygonMode = VK_POLYGON_MODE_FILL
		rasterC.cullMode = VK_CULL_MODE_BACK_BIT
		rasterC.cullMode = VK_CULL_MODE_NONE
		rasterC.frontFace = VK_FRONT_FACE_COUNTER_CLOCKWISE
		rasterC.lineWidth = 1.0f
		//  VK_FALSE, VkBool32   depthClampEnable
		//  VK_FALSE, VkBool32   rasterizerDiscardEnable
		//  VK_FALSE, VkBool32   depthBiasEnable
		//  0.0f,     float      depthBiasConstantFactor
		//  0.0f,     float      depthBiasClamp
		//  0.0f,     float      depthBiasSlopeFactor

		sampleC := VkPipelineMultisampleStateCreateInfo()
		sampleC.rasterizationSamples = VK_SAMPLE_COUNT_1_BIT
		sampleC.minSampleShading = 1.0f
		//  VK_FALSE,   VkBool32              sampleShadingEnable
		//  nullptr,    const VkSampleMask   *pSampleMask
		//  VK_FALSE,   VkBool32              alphaToCoverageEnable
		//  VK_FALSE    VkBool32              alphaToOneEnable

		blndPre := VkPipelineColorBlendAttachmentState[2]
		blndPre[0].srcColorBlendFactor = VK_BLEND_FACTOR_ONE
		blndPre[0].dstColorBlendFactor = VK_BLEND_FACTOR_ZERO
		blndPre[0].colorBlendOp = VK_BLEND_OP_ADD
		blndPre[0].srcAlphaBlendFactor = VK_BLEND_FACTOR_ONE
		blndPre[0].dstAlphaBlendFactor = VK_BLEND_FACTOR_ZERO
		blndPre[0].alphaBlendOp = VK_BLEND_OP_ADD
		blndPre[0].colorWriteMask = VK_COLOR_COMPONENT_R_BIT or_b VK_COLOR_COMPONENT_G_BIT or_b VK_COLOR_COMPONENT_B_BIT or_b VK_COLOR_COMPONENT_A_BIT

		blndPre[1].srcColorBlendFactor = VK_BLEND_FACTOR_ONE
		blndPre[1].dstColorBlendFactor = VK_BLEND_FACTOR_ZERO
		blndPre[1].colorBlendOp = VK_BLEND_OP_ADD
		blndPre[1].srcAlphaBlendFactor = VK_BLEND_FACTOR_ONE
		blndPre[1].dstAlphaBlendFactor = VK_BLEND_FACTOR_ZERO
		blndPre[1].alphaBlendOp = VK_BLEND_OP_ADD
		blndPre[1].colorWriteMask = VK_COLOR_COMPONENT_R_BIT or_b VK_COLOR_COMPONENT_G_BIT or_b VK_COLOR_COMPONENT_B_BIT or_b VK_COLOR_COMPONENT_A_BIT
		//  VK_FALSE,  VkBool32   blendEnable

		blndC := VkPipelineColorBlendStateCreateInfo()
		blndC.logicOp = VK_LOGIC_OP_COPY
		blndC.attachmentCount = 2
		blndC.pAttachments&->{void^^}^ = blndPre[0]&
		//  VK_FALSE,                     VkBool32   logicOpEnable
		//  { 0.0f, 0.0f, 0.0f, 0.0f }    float      blendConstants[4]

		pLC := VkPipelineLayoutCreateInfo()
		//  0,        VkPipelineLayoutCreateFlags    flags
		//  0,        uint32_t                       setLayoutCount
		//  nullptr,  const VkDescriptorSetLayout   *pSetLayouts
		//  0,        uint32_t                       pushConstantRangeCount
		//  nullptr   const VkPushConstantRange     *pPushConstantRanges

		dsC := VkPipelineDepthStencilStateCreateInfo()
		dsC.depthTestEnable = VK_TRUE
		dsC.depthWriteEnable = VK_TRUE
		dsC.depthCompareOp = VK_COMPARE_OP_LESS_OR_EQUAL
		dsC.depthBoundsTestEnable = VK_FALSE
		dsC.minDepthBounds = 0.0f
		dsC.maxDepthBounds = 0.0f
		dsC.stencilTestEnable = VK_FALSE
		dsC.back.failOp = VK_STENCIL_OP_KEEP
		dsC.back.passOp = VK_STENCIL_OP_KEEP
		dsC.back.compareOp = VK_COMPARE_OP_ALWAYS
		dsC.back.compareMask = 0
		dsC.back.reference = 0
		dsC.back.depthFailOp = VK_STENCIL_OP_KEEP
		dsC.back.writeMask = 0
		dsC.front.failOp = VK_STENCIL_OP_KEEP
		dsC.front.passOp = VK_STENCIL_OP_KEEP
		dsC.front.compareOp = VK_COMPARE_OP_ALWAYS
		dsC.front.compareMask = 0
		dsC.front.reference = 0
		dsC.front.depthFailOp = VK_STENCIL_OP_KEEP
		dsC.front.writeMask = 0


		gpC := VkGraphicsPipelineCreateInfo()
		gpC.stageCount = 2
		gpC.pStages&->{void^^}^ = sStg[0]&
		gpC.pVertexInputState&->{void^^}^ = plC&
		gpC.pInputAssemblyState&->{void^^}^ = paC1&
		gpC.pViewportState&->{void^^}^ = pVSC&
		gpC.pRasterizationState&->{void^^}^ = rasterC&
		gpC.pMultisampleState&->{void^^}^ = sampleC&
		gpC.pColorBlendState&->{void^^}^ = blndC&
		gpC.layout = gModelLayout.Get()
		gpC.renderPass = gRenderPassModel
		gpC.basePipelineIndex = -1
		gpC.pDepthStencilState&->{void^^}^ = dsC&
		gpC.pDynamicState&->{void^^}^ = dins&
		//  nullptr,        const VkPipelineTessellationStateCreateInfo   *pTessellationState
		//  nullptr,        const VkPipelineDynamicStateCreateInfo        *pDynamicState
		//  0,              uint32_t                                       subpass
		//  VK_NULL_HANDLE, VkPipeline                                     basePipelineHandle

		result = new vShader
		itInstance.Funcs.vkCreateGraphicsPipelines(vkLogCard,null,1,gpC&,null,result.itPipe&)
	}
}
LoadShaderModule2 := !(vRepoFile^ fil) -> vShaderModule^
{
	filMap := fil.GetMap()

	result = new vShaderModule
	result.LoadShaderModule(filMap.Get(),filMap.Size())
}

TShaderSet := class extend TGCObject
{
	itSet := VkDescriptorSetLayout
	Get := !() -> VkDescriptorSetLayout
	{
		return itSet
	}

	Create := virtual !(VulkanInstance^ inst) -> void
	{
	}
}
TUniformSet := class extend TShaderSet
{
	this := !() -> void
	{
	}

	Create := virtual !(VulkanInstance^ inst) -> void
	{
		oneDesc := VkDescriptorSetLayoutBinding
		oneDesc.binding = 0
		oneDesc.descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER
		oneDesc.descriptorCount = 1
		oneDesc.stageFlags = VK_SHADER_STAGE_VERTEX_BIT
		oneDesc.pImmutableSamplers = null
	
		setDesc := VkDescriptorSetLayoutCreateInfo()
		setDesc.bindingCount = 1
		setDesc.pBindings&->{void^^}^ = oneDesc&->{void^}
	
		inst.Funcs.vkCreateDescriptorSetLayout(vkLogCard,setDesc&,null,itSet&)
	}
}
TImageSet := class extend TShaderSet
{
	this := !() -> void
	{
	}
	Create := virtual !(VulkanInstance^ inst) -> void
	{  
		twoDesc := VkDescriptorSetLayoutBinding
		twoDesc.binding = 0
		twoDesc.descriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER
		twoDesc.descriptorCount = 1
		twoDesc.stageFlags = VK_SHADER_STAGE_FRAGMENT_BIT
		twoDesc.pImmutableSamplers = null
	
		set2Desc := VkDescriptorSetLayoutCreateInfo()
		set2Desc.bindingCount = 1
		set2Desc.pBindings&->{void^^}^ = twoDesc&->{void^}
	
		inst.Funcs.vkCreateDescriptorSetLayout(vkLogCard,set2Desc&,null,itSet&)
	}
}

TPushConstant := class extend TGCObject
{
	cnst := VkPushConstantRange
	Get := !() -> VkPushConstantRange^
	{
		return cnst&
	}
}
TVertexPushConstant := class extend TPushConstant
{
	this := !(int itSize) -> void
	{
		cnst.stageFlags = VK_SHADER_STAGE_VERTEX_BIT
		cnst.offset = 0
		cnst.size = itSize
	}
}

TDescriptorPool := class extend TGCObject
{
	baseLayout := TShaderInput^
	vPool := VkDescriptorPool
	itSet := TShaderSet^
	this := !(TShaderInput^ itm,int setIndex, int poolSize) -> void
	{
		//descPoolSize := VkDescriptorPoolSize
		//descPoolSize.descriptorCount = poolSize
		////descPoolSize.type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER //TODO
		//descPoolSize.0 = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER

		baseLayout = itm
		itSet = itm.itSets[setIndex]
	
		test := u32[2]
		test[0] = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER
		test[1] = poolSize //count
	
		descPoolC := VkDescriptorPoolCreateInfo()
		descPoolC.maxSets = 1
		descPoolC.poolSizeCount = 1
		descPoolC.pPoolSizes&->{void^^}^ = test[0]&->{void^}//descPoolSize
	
		vkCreateDescriptorPool(vkLogCard,descPoolC&,null,vPool&)
	}
	CreateDescriptor := !() -> VkDescriptorSet
	{

		lay := itSet.Get()
		allDesc := VkDescriptorSetAllocateInfo()
		allDesc.descriptorPool = vPool
		allDesc.descriptorSetCount = 1
		allDesc.pSetLayouts&->{void^^}^ = lay&

		preRes := void^
		vkAllocateDescriptorSets(vkLogCard,allDesc&,preRes&)
		return preRes
	}
}
vkPerObjectLayout := VkDescriptorSetLayout
