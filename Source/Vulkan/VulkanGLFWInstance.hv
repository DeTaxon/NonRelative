VulkanGLFWInstance := class extend VulkanInstance
{
	itSurface := VkSurfaceKHR
	itSwapchain := VkSwapchainKHR
	CreateSurface := !(void^ window) -> void
	{
		glfwCreateWindowSurface(Instance,window,null,itSurface&)

		isPres := u32
		vk.Funcs.vkGetPhysicalDeviceSurfaceSupportKHR(vkPhysCard,0,itSurface,isPres&)

		surfAb := VkSurfaceCapabilitiesKHR
		vk.Funcs.vkGetPhysicalDeviceSurfaceCapabilitiesKHR(vkPhysCard,itSurface,surfAb&)

		printf("surface settings\n")
		printf("img count min = %i , max = %i\n",surfAb.minImageCount,surfAb.maxImageCount)

		formsCount := u32
		vk.Funcs.vkGetPhysicalDeviceSurfaceFormatsKHR(vkPhysCard,itSurface,formsCount&,null)
		formts := Vector.{VkSurfaceFormatKHR}(formsCount)
		vk.Funcs.vkGetPhysicalDeviceSurfaceFormatsKHR(vkPhysCard,itSurface,formsCount&,formts.GetPointer())

		printf("formats\n")
		for it : formts
		{
			printf("-format %i\n",it&->{int^}^)
		}

		presMods := u32
		vk.Funcs.vkGetPhysicalDeviceSurfacePresentModesKHR(vkPhysCard,itSurface,presMods&,null)
		pMods := Vector.{VkPresentModeKHR}(presMods)
		vk.Funcs.vkGetPhysicalDeviceSurfacePresentModesKHR(vkPhysCard,itSurface,presMods&,pMods.GetPointer())

		printf("supported mods\n")

		for it : pMods
		{
			switch it
			{
				case VK_PRESENT_MODE_IMMEDIATE_KHR
					printf("- IMMEDIATE\n")
				case VK_PRESENT_MODE_MAILBOX_KHR
					printf("- MAILBOX\n")
				case VK_PRESENT_MODE_FIFO_KHR
					printf("- FIFO\n")
				case VK_PRESENT_MODE_FIFO_RELAXED_KHR
					printf("- FIFO_RELAXED\n")
				case void
					printf("- unknown %i\n",it)
			}
		}
		reqMod := pMods[0]
		reqMod = VK_PRESENT_MODE_FIFO_KHR
		//for gUserModes //TODO
		//{
		//	if it in pMods
		//		reqMod = it
		//}

		//TODO: format priority
		SwapImageFormat = formts[1].format
		SwapImageColorSpace = formts[1].colorSpace
		SwapImageMode = reqMod
	}
	CreateSwapchain := !(int inW,int inH) -> void
	{
		oldSwapchain := vkSwapchain
	
		gVulkanWindowW = inW
		gVulkanWindowH = inH
	
		crtSwap := VkSwapchainCreateInfoKHR()
		crtSwap.surface = vkSurface
		crtSwap.minImageCount = 3
		crtSwap.imageFormat = SwapImageFormat
		crtSwap.imageColorSpace = SwapImageColorSpace
		crtSwap.imageExtent.width = inW
		crtSwap.imageExtent.height = inH
		crtSwap.imageArrayLayers = 1
		crtSwap.imageUsage = VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT
		crtSwap.imageSharingMode = VK_SHARING_MODE_EXCLUSIVE
		crtSwap.queueFamilyIndexCount = 0
		crtSwap.pQueueFamilyIndices = null
		crtSwap.preTransform = VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR
		crtSwap.compositeAlpha = VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR
		crtSwap.presentMode = SwapImageMode
		crtSwap.clipped = 0
		crtSwap.oldSwapchain = null
		
		vkCreateSwapchainKHR(vkLogCard,crtSwap&,null,vkSwapchain&)
	
		if oldSwapchain != null
		{
			vkDestroySwapchainKHR(vkLogCard,oldSwapchain,null)
		}
	
		imgCount := u32
		vkGetSwapchainImagesKHR(vkLogCard,vkSwapchain,imgCount&,null)
		vkImages = new Vector.{VkImage}(imgCount)
		vkGetSwapchainImagesKHR(vkLogCard,vkSwapchain,imgCount&,vkImages.GetPointer())
	
		vkImageViews = new Vector.{VkImageView}(vkImages.Size())
		vkFramebuffers = new Vector.{VkFramebuffer}(vkImages.Size())
		for it,i : vkImages^
		{
			imgViewC := VkImageViewCreateInfo()
			imgViewC.image = it
			imgViewC.viewType = VK_IMAGE_VIEW_TYPE_2D
			imgViewC.format = SwapImageFormat
			imgViewC.components.r = VK_COMPONENT_SWIZZLE_R
			imgViewC.components.g = VK_COMPONENT_SWIZZLE_G
			imgViewC.components.b = VK_COMPONENT_SWIZZLE_B
			imgViewC.components.a = VK_COMPONENT_SWIZZLE_A
	
			imgViewC.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT
			imgViewC.subresourceRange.baseMipLevel = 0
			imgViewC.subresourceRange.levelCount = 1
			imgViewC.subresourceRange.baseArrayLayer = 0
			imgViewC.subresourceRange.layerCount = 1
	
			vk.Funcs.vkCreateImageView(vk.LogicalDevice,imgViewC&,null,vkImageViews^[i]&)
	
			fbC := VkFramebufferCreateInfo()
			fbC.renderPass = gRenderPassLight
			fbC.attachmentCount = 1
			fbC.pAttachments&->{void^^}^ = vkImageViews^[i]&
			fbC.width = inW
			fbC.height = inH
			fbC.layers = 1
	
			vk.Funcs.vkCreateFramebuffer(vkLogCard,fbC&,null,vkFramebuffers^[i]&)
		}
	}
}
