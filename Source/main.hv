win := TestWindow^

gPlayer := PhysPlayer^ 
gCam := vCamera^
gMap := PhysHeightMap^

gQuit := bool

engine := TEngine^

gFpsCounter := int

vkGeometryInstance := class
{
	transform := float[12]
	instanceId_mask := u32
	instanceOffset_flags := u32
	accelerationStructureHandle := u64
}

main := !(char^[] args) -> int
{
	x := 1800
	y := 1000

	win = new TestWindow
	win.Init(x,y,"Hi Again")
	win.SetInputMode("DISABLED")
	
	//TODO can't create empty class
	engine = new TEngine

	VulkanInit()
	
	engine.vInstance = vk
	engine.Init()

	VoidCoreInit()
	vk.CreateSwapchain(engine.lightRenderPass,x,y)
	CreateFB()

	gPlayer = new PhysPlayer()
	gPlayer.System.pos = vec4f(0.0,0.0,2.0,1.0)

	gLightShader = engine.LoadShader("Shaders/Defer.json") //TODO only name Defer needed
	learnShader := engine.LoadShader("Shaders/LearnShader.json")

	drawMirrorShader := engine.LoadShader("Shaders/Mirror.json")

	canvas := engine.LoadModel("Models/Canvas/Canvas.json")

	gCam = new vCamera()
	gCam.SetPerspective(x,y,0.001,100,80deg)

	gPlayerMap = engine.LoadMap("Maps/FirstMap2/FirstMap.json")
	gMapMap := gPlayerMap

	LinkMaps(gPlayerMap,gPlayerMap,45.5x,quantf(0,0,0,1))

	canvasProp = engine.CreateProp(canvas)
	canvasProp.propPosition.pos = vec4f(2.0,0.0,1.4,1.0)
	canvasProp.propPosition.ang = quantfAt(0.0,0.0,1.0,-90deg) <*> quantfAt(1.0,0.0,0.0,90deg)
	//gMapMap.mapProps.Push(canvasProp)

	//packedChar := Vector.{stbtt_packedchar}(256)
	//atlasTest := Vector.{u8}(512*512)
	//pc := new stbtt_pack_context
	//stb_truetype_init()
	//stbtt_PackBegin(pc,atlasTest.GetPointer(),512,512,512,1,null)
	//stbtt_PackSetOversampling(pc,2,2)
	//testFont := FSGetFile("Goldman-Regular.ttf")
	////testFont := FSGetFile("Pacifico.ttf")
	//testFontData := testFont.GetMap()
	//stbtt_PackFontRange(pc,testFontData.Get(),0,20,0,256,packedChar.GetPointer())
	////stbtt_PackEnd(pc)

	//atlTexture := vk.CreateTexture()
	//newTexture := Vector.{u8}(512*512*4)

	//ff := atlasTest.GetPointer()
	//tt := newTexture.GetPointer()
	//for i : 512
	//{
	//	for j : 512
	//	{
	//		tt[(i + j*512)*4 + 0] = ff[i + j*512]
	//		tt[(i + j*512)*4 + 1] = ff[i + j*512]
	//		tt[(i + j*512)*4 + 2] = ff[i + j*512]
	//		tt[(i + j*512)*4 + 3] = 255
	//	}
	//}
	//atlTexture.CreateTexture(512,512,newTexture&)

	//canvasProp.SetTexture(atlTexture)

	NuklearTestInit()
	NuklearCreateStep()

	CreateQuad()


	TSpawnTask(() ==> {
		oldTime := GetSteadyTime()
		while not gQuit
		{
			nowTime := GetSteadyTime()
			vPhysStage(nowTime - oldTime)
			oldTime = nowTime
			TSleep(1 / 150)
		}
	})

	lastFpsCheck := GetSteadyTime()
	localFpsCounter := 0


	//gem1 := VkGeometryNV()
	//gem1.geometryType = VK_GEOMETRY_TYPE_TRIANGLES_NV
	////gem1.triangles.sType = VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV

	//gem1.geometry.triangles.sType = VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV
	//gem1.geometry.triangles.pNext = null
	////gem1.geometry.triangles.vertexData = vb.GetBuffer()
	//gem1.geometry.triangles.vertexOffset = 0
	//gem1.geometry.triangles.vertexCount = 4
	//gem1.geometry.triangles.vertexStride = 8*4//sizeof(vec3)
	//gem1.geometry.triangles.vertexFormat = VK_FORMAT_R32G32B32_SFLOAT
	////gem1.geometry.triangles.indexData = ib.GetBuffer()
	//gem1.geometry.triangles.indexOffset = 0
	//gem1.geometry.triangles.indexCount = 6
	//gem1.geometry.triangles.indexType = VK_INDEX_TYPE_UINT32
	//gem1.geometry.triangles.transformData = null
	//gem1.geometry.triangles.transformOffset = 0
	////gem1.geometry.aabbs
	//gem1.geometry.aabbs.sType = VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV
	//gem1.flags = VK_GEOMETRY_OPAQUE_BIT_NV

	////vkGeometryInstance := class
	////{
	////	transform := float[12]
	////	instanceId_mask := u32
	////	instanceOffset_flags := 32
	////	accelerationStructureHandle := u64
	////}

	//gemInst := vkGeometryInstance
	//gemInst.instanceId_mask = 255 shl 24
	//gemInst.instanceOffset_flags = VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV shl 24

	//printf("test %p\n",vk.Funcs.vkCmdTraceRaysNV)

	//accl := VkAccelerationStructureCreateInfoNV()


	//mirDescr := engine.modelTextureDescriptor.CreateDescriptor()
	//{
	//	vSetTexture(vk,mirDescr,gMirror.Images[0],gSamplerNearest)
	//}
	//canvasProp.SetTexture(gMirror.Images[0])

	step1Cmd := TVkCommandBuffer(vk,vk.itDrawCmdPool2)
	step2Cmd := TVkCommandBuffer(vk,vk.itDrawCmdPool2)

	oldTime := GetSteadyTime()
	inputCoef := 0.5
	while not gQuit
	{
		nowTime := GetSteadyTime()
		delta := nowTime - oldTime
		oldTime = nowTime

		gCam.InputCheck(win,delta*inputCoef,not win.menuMode)

		surfaceIndex := u32
		drawRes := true
		@work vk.DrawGetImage(surfaceIndex&,drawRes&)

		localFpsCounter += 1

		if nowTime - lastFpsCheck > 1.0
		{
			lastFpsCheck = nowTime
			gFpsCounter = localFpsCounter
			localFpsCounter = 0
		}

		if drawRes
		{
			{
				step1Cmd.Reset()
				step1Cmd.Start()

				//gMirror.StartRenderPass(step1Cmd.Get())

				//gCam.camPos.x = 0.0 
				//gCam.camPos.y = 0.0 
				//gCam.camPos.z = 0.0  + 1.7
				//gCam.camPos.x = gPlayer.System.pos.x
				//gCam.camPos.y = gPlayer.System.pos.y + (TestF3 ?: 10 : 0)
				//gCam.camPos.z = gPlayer.System.pos.z + 1.7
				//learnShader.ApplyShaderToQueue(vk,step1Cmd.Get(),vk.GetSurfaceWidth(),vk.GetSurfaceHeight())
				//gCam.BindDescriptor(step1Cmd.Get())

				//DrawMap(step1Cmd.Get(),gPlayerMap,centf(),4)
				//gMirror.StopRenderPass(step1Cmd.Get())


				for i : 3
				{
					bar1 := VkImageMemoryBarrier()
					bar1.image = fbTextures[i].Img()
					bar1.oldLayout = VK_IMAGE_LAYOUT_UNDEFINED
					bar1.newLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL
					bar1.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT
					bar1.subresourceRange.levelCount = 1
					bar1.subresourceRange.layerCount = 1
					vk.Funcs.vkCmdPipelineBarrier(step1Cmd.Get(),VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT,VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT,0,0,null,0,null,1,bar1&)
				}
				{
					bar1 := VkImageMemoryBarrier()
					bar1.image = depthTexture.Img()
					bar1.oldLayout = VK_IMAGE_LAYOUT_UNDEFINED
					bar1.newLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL
					bar1.subresourceRange.aspectMask = VK_IMAGE_ASPECT_DEPTH_BIT
					bar1.subresourceRange.levelCount = 1
					bar1.subresourceRange.layerCount = 1
					vk.Funcs.vkCmdPipelineBarrier(step1Cmd.Get(),VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT,VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT,0,0,null,0,null,1,bar1&)
				}


				StartModelDraw(step1Cmd.Get())

				gCam.camPos.x = gPlayer.System.pos.x
				gCam.camPos.y = gPlayer.System.pos.y
				gCam.camPos.z = gPlayer.System.pos.z + 1.7

				learnShader.ApplyShaderToQueue(vk,step1Cmd.Get(),vk.GetSurfaceWidth(),vk.GetSurfaceHeight())
				gCam.BindDescriptor(step1Cmd.Get())

				DrawMap(step1Cmd.Get(),gPlayerMap,centf(),4)
				zeroOffset := centf()

				//drawMirrorShader.ApplyShaderToQueue(vk,step1Cmd.Get(),vk.GetSurfaceWidth(),vk.GetSurfaceHeight())
				//canvasProp.Draw(step1Cmd.Get(),gCam^,zeroOffset)


				StopModelDraw(step1Cmd.Get())


				step1Cmd.Stop()
				vk.Funcs.vkResetFences(vk.LogicalDevice,1,vk.itGlobFence&)
				step1Cmd.Submit(vk.DrawQueue,vk.itGlobFence)

				hm := u64 //TODO
				hm = not_b hm
				@work vk.Funcs.vkWaitForFences(vk.LogicalDevice,1,vk.itGlobFence&,0,hm)
			}

			{
				step1Cmd.Reset()
				step1Cmd.Start()
				//step2Cmd.Reset()
				//step2Cmd.Start()


				StartTextDraw(step1Cmd.Get(),vk.surfaceFramebuffer,vk.surfaceImageViews^[surfaceIndex],surfaceIndex)

				if win.menuMode
				{
					//nuklearC.InputCheck(win)
					//nuklearC.MakeDraw()
					//nuklearC.RenderStep()
					//nuklearC.Clear()

					//NuklearDrawStep(step2Cmd.Get(),vk.GetSurfaceWidth(),vk.GetSurfaceHeight())
				}
				StopTextDraw(step1Cmd.Get())

				{
					bar1 := VkImageMemoryBarrier()
					bar1.image = vk.surfaceImages^[surfaceIndex]
					bar1.oldLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL
					bar1.newLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR
					bar1.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT
					bar1.subresourceRange.levelCount = 1
					bar1.subresourceRange.layerCount = 1
					vk.Funcs.vkCmdPipelineBarrier(step1Cmd.Get(),VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT,VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT,0,0,null,0,null,1,bar1&)
				}

				step1Cmd.Stop()
				vk.Funcs.vkResetFences(vk.LogicalDevice,1,vk.itGlobFence&)
				step1Cmd.Submit(vk.DrawQueue,vk.itGlobFence)

				hm := u64 //TODO
				hm = not_b hm
				@work vk.Funcs.vkWaitForFences(vk.LogicalDevice,1,vk.itGlobFence&,0,hm)
			}

			vk.DrawPresentImage(surfaceIndex)
		}

		win.SwapBuffers()
		win.PollEvents()

		if not drawRes
		{

			while not win.ShouldClose()
			{
				win.PollEvents()

				if GetSteadyTime() - win.LastTimeResized > 0.1
				{
					break
				}else{
					TSleep(0.01)
				}
			}
			//TODO cases when one of values is zero
			while not vk.CreateSwapchain(engine.lightRenderPass,win.Width,win.Height)
			{
				TSleep(0.5)
			}
			gCam.UpdatePerspective(win.Width,win.Height)
		}

		if win.ShouldClose() or buttons['Q']
		{
			exit(0)
			gQuit = true
		}
	}
}

