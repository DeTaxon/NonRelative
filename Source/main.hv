win := TestWindow^

gPlayer := PhysPlayer^ 
gCam := vCamera^
gMap := PhysHeightMap^

gQuit := bool

engine := TEngine^

gFpsCounter := int

vkGeometryInstance := class
{
	transform := float[12]
	instanceId_mask := u32
	instanceOffset_flags := u32
	accelerationStructureHandle := u64
}

main := !(char^[] args) -> int
{
	x := 1920
	y := 1080

	//x = 500
	//y = 500

	win = new TestWindow
	win.Init(x,y,"Hi Again",true)
	win.SetInputMode("DISABLED")
	
	//TODO can't create empty class
	engine = new TEngine()

	VulkanInit()
	
	engine.vInstance = vk
	engine.Init()

	VoidCoreInit()
	vk.CreateSwapchain(x,y)
	CreateFB()

	gPlayer = new PhysPlayer()
	gPlayer.System.pos = vec4f(0.0,0.0,2.0,1.0)

	gLightShader = engine.LoadShader("Shaders/Defer.json") //TODO only name Defer needed
	learnShader := engine.LoadShader("Shaders/LearnShader.json")

	drawMirrorShader := engine.LoadShader("Shaders/Mirror.json")

	//canvas := engine.LoadModel("Models/Canvas/Canvas.json")

	sphere := engine.LoadModel("Models/Sphere/Sphere.json")

	gCam = new vCamera()
	gCam.SetPerspective(x,y,0.001,100,80deg)

	gPlayerMap = engine.LoadMap("Maps/FirstMap2/FirstMap.json")
	gMapMap := gPlayerMap

	LinkMaps(gPlayerMap,gPlayerMap,45.5x,quantf(0,0,0,1))

	sPos := vec4f(2.0,-1.0,2.0,1.0)
	sphr1 := engine.CreateProp(sphere)
	sphr1.PhysModel.System.pos = sPos 

	sPos2 := vec4f(3.0,-2.0,2.0,1.0)
	sphr2 := engine.CreateProp(sphere)
	sphr2.PhysModel.System.pos = sPos2

	gPlayerMap.mapProps.Push(sphr1)
	gPlayerMap.mapProps.Push(sphr2)

	hdn := engine.CreateProp(sphere)

	//canvasProp = engine.CreateProp(canvas)
	//canvasProp.propPosition.pos = vec4f(2.0,0.0,1.4,1.0)
	//canvasProp.propPosition.ang = quantfAt(0.0,0.0,1.0,-90deg) <*> quantfAt(1.0,0.0,0.0,90deg)

	NuklearTestInit()
	NuklearCreateStep()

	CreateQuad()

	TSpawnTask(() ==> {

		while not gQuit
		{
			sphr1.PhysModel.ImpulseV = vec4f(0,0,0.0,0)
			sphr1.PhysModel.System.pos = sPos
			TSleep(1.7)
		}
	})

	TSpawnTask(() ==> {

		while not gQuit
		{
			sphr2.PhysModel.ImpulseV = vec4f(0,0,0.0,0)
			sphr2.PhysModel.System.pos = sPos2
			TSleep(1.3)
		}
	})

	TSpawnTask(() ==> {
		oldTime := GetSteadyTime()
		while not gQuit
		{
			nowTime := GetSteadyTime()
			vPhysStage(nowTime - oldTime)
			oldTime = nowTime
			TSleep(1 / 150)
		}
	})

	//meshDataBlob := MakeBlob(64*64*64*16)
	//meshShaderBuffer := vk.CreateMemBufferObject(meshDataBlob.Size(),VK_BUFFER_USAGE_VERTEX_BUFFER_BIT or_b VK_BUFFER_USAGE_STORAGE_BUFFER_BIT or_b VK_BUFFER_USAGE_TRANSFER_DST_BIT)
	//meshData := meshDataBlob.GetPointer()->{u8^}
	//
	//
	//{
	//	cntr := vec3f(32.0,32.0,32.0)

	//	iii := 0
	//	for z : 64
	//	{
	//		for y : 64
	//		{
	//			for x : 64
	//			{
	//				thisCntr := vec3f(x,y,z)
	//				dist := Distance(thisCntr,cntr)
	//				meshData[iii*16]&->{u32^}^ = dist <= 19.5 ?: 1 : 0
	//				iii += 1
	//			}
	//		}
	//	}
	//}

	//meshShaderBuffer.TransferData(ArraySpan.{u8}(meshData->{u8^},meshDataBlob.Size()))

	lastFpsCheck := GetSteadyTime()
	localFpsCounter := 0

	//meshBase := engine.modelRenderPass.CreateLayout(![],![
	//	new TUniformSet(VK_SHADER_STAGE_MESH_BIT_EXT),
	//	new TUniformStorage(VK_SHADER_STAGE_MESH_BIT_EXT)
	//],![
	//	new TMeshPushConstant(4*4*3)
	//],3)

	//meshPool := meshBase.CreateDescriptorPool(0,16)
	//meshDescr := meshPool.CreateDescriptor()
	//meshPool2 := meshBase.CreateDescriptorPool(1,16)
	//meshDescr2 := meshPool2.CreateDescriptor()

	//meshDescrMem := vk.CreateMemBufferObject(4*4,VK_BUFFER_USAGE_VERTEX_BUFFER_BIT or_b VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT or_b VK_BUFFER_USAGE_TRANSFER_DST_BIT)

	//meshPos := centf()
	//meshPos.pos.x = 9
	//meshPos.pos.y = 9
	//meshPos.pos.z = 1.5
	//meshPos.ang = quantfAt(1.0,0.0,0.0,-90deg)

	//task := engine.shaderCompiler.Compile(FSGetFile(StringSpan("Shaders/Sphere.task")))
	//mesh := engine.shaderCompiler.Compile(FSGetFile(StringSpan("Shaders/Sphere.mesh")))
	//frag := engine.shaderCompiler.Compile(FSGetFile(StringSpan("Shaders/Sphere.frag")))
	//meshShader := meshBase.CreateMeshShader(task,mesh,frag) 

	//bufInfo := VkDescriptorBufferInfo
	//bufInfo.buffer = meshDescrMem.itBuffer
	//bufInfo.offset = 0
	//bufInfo.range = 4*4
	//someWrite := VkWriteDescriptorSet[2]
	//someWrite[0]."this"()
	//someWrite[0].dstSet = meshDescr 
	//someWrite[0].dstBinding = 0
	//someWrite[0].dstArrayElement = 0
	//someWrite[0].descriptorCount = 1
	//someWrite[0].descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER
	//someWrite[0].pBufferInfo&->{void^^}^ = bufInfo&
	//bufInfo2 := VkDescriptorBufferInfo
	//bufInfo2.buffer = meshShaderBuffer.itBuffer
	//bufInfo2.offset = 0
	//bufInfo2.range = meshDataBlob.Size()
	//someWrite[1]."this"()
	//someWrite[1].dstSet = meshDescr2
	//someWrite[1].dstBinding = 0
	//someWrite[1].dstArrayElement = 0
	//someWrite[1].descriptorCount = 1
	//someWrite[1].descriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER
	//someWrite[1].pBufferInfo&->{void^^}^ = bufInfo2&

	//vk.Funcs.vkUpdateDescriptorSets(vk.LogicalDevice,2,someWrite[0]&,0,null)
	//
	//{
	//	aspect := 1800 / 1000
	//	fovTM := 1.0f / tan(gCam.camPOV*0.5f)
	//	range := gCam.camFar - gCam.camNear

	//	perspConsts := float[4]

	//	perspConsts[0] = fovTM / aspect
	//	perspConsts[1] = fovTM
	//	perspConsts[2] = (gCam.camFar + gCam.camNear) / range
	//	perspConsts[3] = 2.0*(gCam.camFar*gCam.camNear/range)

	//	meshDescrMem.TransferData(ArraySpan.{u8}(perspConsts[0]&->{u8^}, 4*4)) //TODO
	//}
	gCam.camPos.z = 1.7

	step1Cmd := TVkCommandBuffer(vk,vk.itDrawCmdPool2)
	step2Cmd := TVkCommandBuffer(vk,vk.itDrawCmdPool2)


	//deleteSphere := vec3f(25.0f,25.0f,65.0f)

	oldTime := GetSteadyTime()
	inputCoef := 0.5
	while not gQuit
	{
		nowTime := GetSteadyTime()
		delta := nowTime - oldTime
		oldTime = nowTime

		gCam.InputCheck(win,delta*inputCoef,not win.menuMode)
	
		if false
		{
			deleteSphere.z -= delta
			{
				iii := 0
				for z : 64
				{
					for y : 64
					{
						for x : 64
						{
							dist := Distance(deleteSphere,vec3f(x,y,z))
							if dist <= 6.5
							{
								meshData[iii*16]&->{int^}^ = 0
							}
							iii += 1
						}
					}
				}
			}
			meshShaderBuffer.TransferData(ArraySpan.{u8}(meshData->{u8^},meshDataBlob.Size()))
		}

		surfaceIndex := u32
		drawRes := false
		@work vk.DrawGetImage(surfaceIndex&,drawRes&)

		localFpsCounter += 1

		if nowTime - lastFpsCheck > 1.0
		{
			lastFpsCheck = nowTime
			gFpsCounter = localFpsCounter
			localFpsCounter = 0
		}

		if drawRes
		{
			{
				step1Cmd.Reset()
				step1Cmd.Start()


				for i : 3
				{
					bar1 := VkImageMemoryBarrier()
					bar1.image = fbTextures[i].Img()
					bar1.oldLayout = VK_IMAGE_LAYOUT_UNDEFINED
					bar1.newLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL
					bar1.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT
					bar1.subresourceRange.levelCount = 1
					bar1.subresourceRange.layerCount = 1
					vk.Funcs.vkCmdPipelineBarrier(step1Cmd.Get(),VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT,VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT,0,0,null,0,null,1,bar1&)
				}

				{
					bar1 := VkImageMemoryBarrier()
					bar1.image = depthTexture.Img()
					bar1.oldLayout = VK_IMAGE_LAYOUT_UNDEFINED
					bar1.newLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL
					bar1.subresourceRange.aspectMask = VK_IMAGE_ASPECT_DEPTH_BIT
					bar1.subresourceRange.levelCount = 1
					bar1.subresourceRange.layerCount = 1
					vk.Funcs.vkCmdPipelineBarrier(step1Cmd.Get(),VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT,VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT,0,0,null,0,null,1,bar1&)
				}


				StartModelDraw(step1Cmd.Get())

				gCam.camPos.x = gPlayer.System.pos.x
				gCam.camPos.y = gPlayer.System.pos.y
				gCam.camPos.z = gPlayer.System.pos.z + 1.7


				learnShader.ApplyShaderToQueue(vk,step1Cmd.Get(),vk.GetSurfaceWidth(),vk.GetSurfaceHeight())
				gCam.BindDescriptor(step1Cmd.Get())

				DebugDrawPoints(step1Cmd.Get(),gCam,hdn)
				DrawMap(step1Cmd.Get(),gPlayerMap,centf(),4)



				if false
				{
					zeroOffset := centf()

					constData := u8[128]
					meshBasePos := constData&->{centf^}
					constData[4*4*2]&->{float^}^ = glfwGetTime()
					gCam.ApplyCamera(meshPos,meshBasePos^)
					meshShader.ApplyShaderToQueue(vk,step1Cmd.Get(),vk.GetSurfaceWidth(),vk.GetSurfaceHeight())
					vk.Funcs.vkCmdPushConstants(step1Cmd.Get(),meshBase.Get(),1 shl 7,0,4*4*3,meshBasePos[0]&)
					vk.Funcs.vkCmdBindDescriptorSets(step1Cmd.Get(),VK_PIPELINE_BIND_POINT_GRAPHICS,meshBase.Get(),0,1,meshDescr&,0,null) //TODO remove vk.Funcs
					vk.Funcs.vkCmdBindDescriptorSets(step1Cmd.Get(),VK_PIPELINE_BIND_POINT_GRAPHICS,meshBase.Get(),1,1,meshDescr2&,0,null) //TODO remove vk.Funcs
					vk.Funcs.vkCmdDrawMeshTasksEXT(step1Cmd.Get(),63,63,63)
				}


				StopModelDraw(step1Cmd.Get())
			}


			{

				StartTextDraw(step1Cmd.Get(),vk.surfaceImageViews^[surfaceIndex],surfaceIndex)

				if win.menuMode
				{
					//nuklearC.InputCheck(win)
					//nuklearC.MakeDraw()
					//nuklearC.RenderStep()
					//nuklearC.Clear()

					//NuklearDrawStep(step2Cmd.Get(),vk.GetSurfaceWidth(),vk.GetSurfaceHeight())
				}
				StopTextDraw(step1Cmd.Get())

				{
					bar1 := VkImageMemoryBarrier()
					bar1.image = vk.surfaceImages^[surfaceIndex]
					bar1.oldLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL
					bar1.newLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR
					bar1.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT
					bar1.subresourceRange.levelCount = 1
					bar1.subresourceRange.layerCount = 1
					vk.Funcs.vkCmdPipelineBarrier(step1Cmd.Get(),VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT,VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT,0,0,null,0,null,1,bar1&)
				}

				step1Cmd.Stop()
				//vk.Funcs.vkResetFences(vk.LogicalDevice,1,vk.itGlobFence&)
				//step1Cmd.Submit(vk.DrawQueue,vk.itGlobFence)
				step1Cmd.Submit(vk.DrawQueue,null)

				//hm := u64 //TODO
				//hm = not_b hm
				//@work vk.Funcs.vkWaitForFences(vk.LogicalDevice,1,vk.itGlobFence&,0,hm)
			}

			vk.DrawPresentImage(surfaceIndex)
		}
		//win.SwapBuffers()
		win.PollEvents()
		TaskYield()

		if not drawRes
		{
			while not win.ShouldClose()
			{
				win.PollEvents()

				if GetSteadyTime() - win.LastTimeResized > 0.1
				{
					break
				}else{
					TSleep(0.01)
				}
			}

			surfaceInfo := VkSurfaceCapabilitiesKHR
			vk.Funcs.vkGetPhysicalDeviceSurfaceCapabilitiesKHR(vk.PhysicalDevice,vk.itSurface,surfaceInfo&)

			setW := clamp(surfaceInfo.minImageExtent.width,win.Width->{u32},surfaceInfo.minImageExtent.width)
			setH := clamp(surfaceInfo.minImageExtent.height,win.Height->{u32},surfaceInfo.minImageExtent.height)

			//TODO cases when one of values is zero
			while not vk.CreateSwapchain(engine.lightRenderPass,setW,setH)
			{
				TSleep(0.5)
			}
			gCam.UpdatePerspective(win.Width,win.Height)
		}

		if win.ShouldClose() or buttons['Q']
		{
			gQuit = true
		}
	}
}

