
LoadShaderModule := !(char^ name) -> vShaderModule^
{
	fil := FSGetFile(name)
	filMap := fil.GetMap()

	result = new vShaderModule
	result.LoadShaderModule(filMap.Get(),filMap.Size())
}

gPlayer := PhysPlayer^ 
gCam := vCamera^
gMap := PhysHeightMap^

gQuit := bool

engine := TEngine^

main := !(char^[] args) -> int
{

	x := 1200
	y := 900
	
	//TODO can't create empty class
	engine = new TEngine

	CreateWindow(x,y)
	VulkanInit()
	
	engine.vInstance = vk
	engine.Init()

	VoidCoreInit()
	CreateSwapchain(x,y)
	CreateFB()


	gPlayer = new PhysPlayer()
	gPlayer.System.pos = vec4f(0.0,0.0,2.0,1.0)

	deferVert := LoadShaderModule("Shaders/ShaderCache/Defer.vert")
	deferFrag := LoadShaderModule("Shaders/ShaderCache/Defer.frag")
	gLightShader = new vShader
	gLightShader.LoadShaderLight(deferVert,deferFrag)

	// learnVert := LoadShaderModule("Shaders/ShaderCache/LearnVert.vert")
	learnVert := LoadShaderModule("Vert2.vert")
	learnFrag := LoadShaderModule("Shaders/ShaderCache/LearnFrag.frag")
	learnShader := new vShader
	opts := vShaderVertexOptions
	opts.positionType = VKType(VType_Float,3)
	opts.normalType = VKType(VType_Float,3)
	opts.textureType = VKType(VType_Float,2)
	learnShader.LoadShader(learnVert,learnFrag,opts&)

	canvas := engine.LoadModel("Models/Canvas/Canvas.json")

	gCam = new vCamera()
	gCam.SetPerspective(x,y,0.001,100,80deg)

	canvasProp = engine.CreateProp(canvas)

	canvasProp.propPosition.pos = vec4f(2.0,0.0,1.4,1.0)
	canvasProp.propPosition.ang = quantfAt(0.0,0.0,1.0,-90deg) <*> quantfAt(1.0,0.0,0.0,90deg)

	gPlayerMap = engine.LoadMap("Maps/FirstMap2/FirstMap.json")
	gMapMap := gPlayerMap

	LinkMaps(gPlayerMap,gPlayerMap,45.5x,quantf(0,0,0,1))

	gMapMap.mapProps.Push(canvasProp)

	//NuklearTestInit()
	//NuklearCreateStep()


	TSpawnTask(() ==> {
		oldTime := GetSteadyTime()
		while not gQuit
		{
			nowTime := GetSteadyTime()
			vPhysStage(nowTime - oldTime)
			oldTime = nowTime
			TSleep(1 / 30)
		}
	})

	oldTime := GetSteadyTime()
	inputCoef := 0.5
	while not gQuit
	{
		nowTime := GetSteadyTime()
		delta := nowTime - oldTime
		oldTime = nowTime

		//gCam.InputCheck(delta*inputCoef)

		@work DrawGetImage()

		vk.PushDrawQueueAndWait(cmd ==> {
			StartDraw(cmd.Get())

			gCam.camPos.x = gPlayer.System.pos.x
			gCam.camPos.y = gPlayer.System.pos.y
			gCam.camPos.z = gPlayer.System.pos.z + 1.7

			learnShader.ApplyShaderToQueue(cmd.Get())
			gCam.BindDescriptor(cmd.Get())

			DrawMap(cmd.Get(),gPlayerMap,centf(),4)

			StopDraw(cmd.Get())
		})

		res := VkResult
		pI := VkPresentInfoKHR()
		pI.pNext = null
		pI.waitSemaphoreCount = 0
		pI.pWaitSemaphores = null
		pI.swapchainCount = 1
		pI.pSwapchains&->{void^^}^ = vkSwapchain&->{void^}
		pI.pImageIndices&->{void^^}^ = nowImg&->{void^}
		pI.pResults&->{void^^}^ = res&

		vk.Funcs.vkQueuePresentKHR(vk.DrawQueue,pI&)
		vk.Funcs.vkQueueWaitIdle(vk.DrawQueue)
		
		glfwSwapBuffers(glfwWindow)
		glfwPollEvents()

		if glfwWindowShouldClose(glfwWindow) or buttons['Q']
		{
			gQuit = true
		}
	}
}

