

PhysTypeEnum := enum
{
	"HMap",
	"Player",
	"Sphere",
	"Box",
	"Cylinder"
}


PhysCommon := class
{
	PhysType := PhysTypeEnum
	System := centf
	ExpectedMove := vec4f
	ImpulseV := vec4f
	ImpulseA := vec4f

	Weight := float
}

PhysSphere := class extend PhysCommon
{
	Radius := float

	this := !(float rad) -> void
	{
		PhysType = "Sphere"
		Radius = rad
		System.ang = quantf(0.0f,0.0f,0.0f,1.0f)
		Weight = 1.0f
	}
}


PhysPlace := class extend PhysCommon
{
	Normal := vec4f
	Dimentions := vec2f
	Distance := float

	this := !(vec4f pos,vec4f norm, vec2f dimentions) -> void
	{
		norm.w = 0.0f
		System.pos = pos
		Normal = norm.Normal()
		Distance = -(norm<+>pos)
		Dimentions = dimentions
	}
}

PhysInfPlane := class extend PhysCommon
{
	Normal := vec4f
	Distance := float
	this := !(vec4f pos,vec4f norm) -> void
	{
		norm.w = 0.0f
		System.pos = pos
		Normal = norm.Normal()
		Distance = -(norm<+>pos)
	}
}
PhysPlayer := class extend PhysCommon
{
	Height := float
	Width := float
	
	this := !() -> void {
		PhysType = "Player"
	}
}
PhysHightSphere := class
{
	PosAndSize := vec4f
	SpheresCount := u8
	TriCount := u8
	CSpheres := u16[3]
	Triangles := u16[4]
}//total size 32 byte

PhysHeightMap := class
{
	PhysType := PhysTypeEnum
	Dots := vec4f^ //array
	Triangles := u16[3]^
	Spheres := PhysHightSphere^ //array
	Sticky := bool

	this := !() -> void
	{
		PhysType = "HMap"
	}

	CreateDots := !(RawModel^ mdlValue) -> int
	{
		floats := mdlValue.GetVertAsFloat()
		nDots := new Vector.{vec4f}(mdlValue.VertexCount + 1)
		
		for i,j : nDots
		{
			if j == 0 continue
			memcpy(i&,floats[(j-1)*8]&,vec4f->TypeSize) //TODO: remove 8
		}
	
		inds32 := mdlValue.GetIndsU32()
		triCount := inds32.Size() div 3
		Triangles2 := new Vector.{u16[3]}(triCount)
		
		for i : triCount
		{
			Triangles2^[i][0] = inds32[i*3    ] + 1
			Triangles2^[i][1] = inds32[i*3 + 1] + 1
			Triangles2^[i][2] = inds32[i*3 + 2] + 1
		}
		
		SpheresStart := new List.{PhysHightSphere^}
		
		phase := new List.{Tuple.{PhysHightSphere^,bool}}
		for tri,i : Triangles2
		{
			ns := new PhysHightSphere
			a := nDots^[tri[0]]
			b := nDots^[tri[1]]
			c := nDots^[tri[2]]
			center := (a + b + c) / 3.0
			aDs := Distance(a,center)
			bDs := Distance(b,center)
			cDs := Distance(c,center)
			center.w = max(aDs,max(bDs,cDs))*1.01
			ns.PosAndSize = center
			ns.TriCount = 1
			ns.Triangles[0] = i
			
			phase.Emplace(ns,false)
		}
		
		fakeNodes := 0
		while phase.Size() != 1
		{
			newPhase := new List.{Tuple.{PhysHightSphere^,bool}}
			
			for it,i : phase^
			{
				if it.1 
					continue
				
				cand := i
				candDist := 10000000000.0
				candPos := vec4f
				candPos.w = 0.0
				candBool := bool^
				
				for cn,j : phase^
				{
					if j <= i continue
					if cn.1 continue
					
					itDist := Distance(cn.0.PosAndSize.xyz,it.0.PosAndSize.xyz)
					itDist -= cn.0.PosAndSize.w + it.0.PosAndSize.w
					if candDist > itDist
					{
						cand = j
						candDist = itDist
						candPos = cn.0.PosAndSize
						candBool = cn.1&
					}
				}
				if cand == i
				{
					newPhase.Emplace(it.0,false)
					fakeNodes += 1
				}else{
					ns := new PhysHightSphere
					cent := (it.0.PosAndSize + candPos) / 2
					cent.w = Distance(candPos.xyz,it.0.PosAndSize.xyz) + max(it.0.PosAndSize.w,max(candPos.w,it.0.PosAndSize.w))
					candBool^ = true
					ns.SpheresCount = 2
					ns.CSpheres[0] = i + SpheresStart.Size()
					ns.CSpheres[1] = cand + SpheresStart.Size()
					ns.PosAndSize = cent
					newPhase.Emplace(ns,false)
				}
				it.1 = true
			}
			
			for it : phase^
			{
				SpheresStart.Push(it.0)
			}
			phase = newPhase
		}
		SpheresStart.Push(phase^[0].0)
		
		allctdNodes := 0
		resSpheres := new Vector.{PhysHightSphere}(SpheresStart.Size() - fakeNodes)

		addSphereW := !(int,u16^)&-> void
		addSphere := (int ind,u16^ resInt) ==> [addSphereW&] {
			resInt^ = allctdNodes
			nowSphere := resSpheres^[allctdNodes]&
			allctdNodes += 1

			fromSphere := SpheresStart^[ind]
			
			nowSphere.PosAndSize = fromSphere.PosAndSize

			nowSphere.TriCount = fromSphere.TriCount
			for i : fromSphere.TriCount
			nowSphere.Triangles[i] = fromSphere.Triangles[i]

			nowSphere.SpheresCount = fromSphere.SpheresCount
			for i : nowSphere.SpheresCount
			{
				addSphereW(fromSphere.CSpheres[i],nowSphere.CSpheres[i]&)
			}
		}
		addSphereW = addSphere
		fkNode := u16
		addSphere(SpheresStart.Size() - 1,fkNode&)
		
		resSize := nDots.Size()*vec4f->TypeSize + Triangles2.Size()*2*3 + resSpheres.Size()*PhysHightSphere->TypeSize
		
		asIntP := nDots.GetPointer()->{u32^}
		asIntP[0] = nDots.Size()*vec4f->TypeSize
		asIntP[1] = resSpheres.Size()*PhysHightSphere->TypeSize
		asIntP[2] = Triangles2.Size()*2*3

		//TODO: 16 byte align alloc
		itMap := malloc(resSize)->{u8^}
		Dots = itMap->{vec4f^}
		Spheres = itMap[asIntP[0]]&->{PhysHightSphere^}
		Triangles = itMap[asIntP[0] + asIntP[1]]&->{u16[3]^}

		memcpy(Dots,nDots.GetPointer()->{void^},asIntP[0])
		memcpy(Spheres,resSpheres.GetPointer()->{void^},asIntP[1])
		memcpy(Triangles,Triangles2.GetPointer()->{void^},asIntP[2])

		return resSize
	}
	LoadFromHMap1 := !(File^ fl) -> void
	{
		ptr := fl.Map()
		defer fl.Unmap() //TODO: keep map

		asInt := ptr->{int^}
		resSize := asInt[0] + asInt[1] + asInt[2]
		resPtr := malloc(resSize) //TODO: 16 byte align
		memcpy(resPtr,ptr,resSize)

		Dots = resPtr
		Spheres = resPtr + asInt[0]
		Triangles = resPtr + asInt[0] + asInt[1]
	}
	SaveToHMap1 := !(char^ flName) -> void
	{
		assert(Dots != null)
		asInts := Dots->{int^}
		resSize := asInts[0] + asInts[1] + asInts[2]
		toSet := MappedFile(flName,FILE_CREATE,resSize)
		defer toSet.Close()
		memcpy(toSet.Get(),Dots,resSize)
	}

	GetTris := !(vec4f pos,u16[32]^ triBuf, int^ triSize,int sInd)-> void
	{
		itSphere := Spheres[sInd]&

		if Distance(pos.xyz,itSphere.PosAndSize.xyz) > (pos.w + itSphere.PosAndSize.w)
			return void

		for i : itSphere.SpheresCount
			GetTris(pos,triBuf,triSize,itSphere.CSpheres[i])

		for i : itSphere.TriCount
		{
			if triSize^ == 32 return void
			triBuf^[triSize^] = itSphere.Triangles[i]
			triSize^ += 1
		}
	}
	
	TriangleDistance := !(vec4f pos, u16 ind,vec4f^ res,vec4f^ resNorm) -> bool
	{
		itTri := ref Triangles[ind]
		return TriangleDistance(pos,Dots[itTri[0]],Dots[itTri[1]],Dots[itTri[2]],res,resNorm)
	}
	GetNormal := !(int triInd) -> vec4f
	{
		itTri := ref Triangles[triInd]
		a := Dots[itTri[2]] - Dots[itTri[0]]
		b := Dots[itTri[1]] - Dots[itTri[0]]
		preRes := a <*> b
		return preRes.xyz0.Normal()
	}
	TriangleDistance := !(vec4f pos, vec4f a, vec4f b, vec4f c,vec4f^ res,vec4f^ resNorm) -> bool
	{
		a = a.xyz0
		b = b.xyz0
		c = c.xyz0

		//DDrawPoint(a)
		//DDrawPoint(b)
		//DDrawPoint(c)


		ab := b - a
		ac := c - a

		dAB := ab.Length()
		dAC := ac.Length()

		ab = ab.Normal()
		ac = ac.Normal()

		pos = pos.xyz0
		
		normal := ab <*> ac
		normal = normal.Normal()

		resNorm^ = normal

		p := -(normal <+> a)

		dist := normal <+> pos + p

		proj := pos - normal*dist
		// DDrawPoint(proj)

		ap := proj - a

		rb := (ab <+> ap)
		rc := (ac <+> ap)
		
		if rb < 0.0f or rc < 0.0f return false
		if rb + rc > dAB + dAC return false

		res^ = proj
		
		return true
	}
	
	TriangleDistanceH := !(vec4f pos, u16 ind,vec4f^ res) -> bool
	{
		itTri := Triangles[ind]&
		return TriangleDistanceH(pos,Dots[itTri^[0]],Dots[itTri^[1]],Dots[itTri^[2]],res)
	}
	TriangleDistanceH := !(vec4f pos, vec4f a, vec4f b, vec4f c,vec4f^ res) -> bool
	{
		//img1 := ab.y*ap.x - ab.x*ap.y
		//img2 := ac.y*ap.x - ac.x*ap.y

		rA := a.xy - pos.xy
		rB := b.xy - pos.xy
		rC := c.xy - pos.xy

		//step1
		img11 := rB.y*rA.x - rB.x*rA.y
		img12 := rC.y*rA.x - rC.x*rA.y

		//step2
		img21 := rA.y*rB.x - rA.x*rB.y
		img22 := rC.y*rB.x - rC.x*rB.y
		
		if img11*img12 > 0 return false
		if img21*img22 > 0 return false

		ab := b.xyz0 - a.xyz0
		ac := c.xyz0 - a.xyz0
		ap := pos.xyz0 - a.xyz0

		ab = ab.Normal()
		ac = ac.Normal()

		norm := ab<*>ac
		left := norm<*>ab

		rb := (ab.xy <+> ap.xy) / ab.xy.LengthSq()
		rc := (left.xy <+> ap.xy) / left.xy.LengthSq()
		
		res^ = (ab*rb + left*rc + a) 
		
		return true
	}
}



sqrta := !(float inp) -> float
{	
	if inp < 0
	{
		return -sqrtf(-inp)
	}
	return sqrtf(inp)
}




PhysCheckPlayerVSSphere := !(PhysSphere^ p,PhysHeightMap^ hMap) -> void //TODO
{
	triC := int
	tris := u16[32]

	testPos := p.System.pos
	testPos.w = tHeight

	GetTris(p.System.pos,tris&,triC&,0)
	for i : triC
	{
		hV := vec4f
		nowT := TriangleDistance(p.System.pos,tris[i],hV&)
		if nowT
		{
			dist := Distance(hV.xyz,p.System.pos.xyz)
			if dist <= p.System.pos.w
			{
				norm := hMap.GetNormal(tris[i])
				nrm := hV.xyz - p.System.pos.xyz
				nrm = nrm.Normal()
			
				cas := nrm <+> (p.System.pos.xyz - hV.xyz)
				p.ImpulseV += nrm*(-cas*2.0f)
			}
		}
	}
}


PhysCheckSvIP := !(PhysSphere^ o1, PhysInfPlane^ o2) -> void //TODO
{
	dist := o2.Normal<+>o1.System.pos + o2.Distance

	if dist > o1.Radius
		return void
	
	diffImp := sqrta(o1.ImpulseV <+> o2.Normal)
	if diffImp > 0
		return void
	o1.ImpulseV += o2.Normal*(-diffImp*2.0f)
}
PhysCheckSvS := !(PhysSphere^ o1,PhysSphere^ o2) -> void
{
	distVec := o1.System.pos - o2.System.pos
	distVec.w = 0.0f
	distSq := distVec <+> distVec

	if distSq > (o1.Radius + o2.Radius)**2
		return void
	
	cas := distVec.Normal()

	imp1S := sqrta(o1.ImpulseV <+> cas)
	imp2S := sqrta(o2.ImpulseV <+> cas)

	massProc := o1.Weight / (o1.Weight + o2.Weight)

	mPass1 := massProc*2.0f - 1.0f
	mPass2 := -mPass1

	if imp1S > 0.0f
	{
		if imp2S > 0.0f
		{	
			resImp2  := -imp2S*mPass1
			o2.ImpulseV = o2.ImpulseV - cas*imp2S + cas*resImp2
			o1.ImpulseV = o1.ImpulseV - cas*imp1S + cas*(imp1S + imp2S - resImp2)
		}else{
			//dont care
		}
	}else{
		if imp2S > 0.0f
		{
			if imp2S > -imp1S
			{
				resImp2  := -imp2S*mPass1
				o2.ImpulseV = o2.ImpulseV - cas*imp2S + cas*resImp2
				o1.ImpulseV = o1.ImpulseV - cas*imp1S + cas*(imp1S + imp2S - resImp2)			
			}else{
				resImp1  := imp1S*mPass1
				o1.ImpulseV = o1.ImpulseV - cas*imp1S + cas*resImp1
				o2.ImpulseV = o2.ImpulseV - cas*imp2S + cas*(imp1S + imp2S - resImp1)			
			}
		}else{
			resImp1  := imp1S*mPass1
			o1.ImpulseV = o1.ImpulseV - cas*imp1S + cas*resImp1
			o2.ImpulseV = o2.ImpulseV - cas*imp2S + cas*(imp1S + imp2S - resImp1)
		}
	}
}
PhysVsPhys := !(PhysCommon^ a, PhysCommon^ b,centf offset) -> int
{
	if a.PhysType < b.PhysType
	{
		return PhysVsPhys(b,a,offset.Inverse())
	}
	//TODO: phys to table
	switch a.PhysType
	{
	case "Player"
		switch b.PhysType
		{
		case "HMap"
			return PhysCheckPlayerVSHMap(a->{PhysPlayer^},b->{PhysHeightMap^},offset)
		}
	case "Sphere"
		switch b.PhysType
		{
		case "HMap"
			return PhysCheckSphereVSHMap(a->{PhysSphere^},b->{PhysHeightMap^},offset)
			
		}
	}
	return 0
}


CopyPhysModel := !(PhysCommon^ mdl) -> PhysCommon^
{
	switch mdl.PhysType
	{
	case "Sphere"
		res := new PhysSphere
		memcpy(res,mdl,PhysSphere->TypeSize)
		return res
	case "HMap"
		return mdl
	case void
		
		assert(false)
	}

}

