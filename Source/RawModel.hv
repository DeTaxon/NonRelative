MODEL_NONE := 0
MODEL_LOADED := 1
MODEL_INVRAM := 2

MODEL_POSITION := 1
MODEL_NORMAL := 2
MODEL_UV := 4

RawModel := class
{
	verts := void^
	VertexCount := int
	PositionType := VKType
	NormalType := VKType
	UVType := VKType

	vertItems := int

	inds := void^
	IndexType := VKType
	IndexCount := int

	GetVertAsFloat := !() -> float[]
	{
		floatCount := PositionType.TypeCount + NormalType.TypeCount + UVType.TypeCount

		preRetI := 0
		preRet := new Vector.{float}(floatCount*VertexCount)

		from := verts->{u8^}
		moves := new Vector.{int}(floatCount->{int})
		for j : VertexCount
		{
			for typ : ![PositionType&,NormalType&,UVType&]
			{
				if typ.BaseType == VType_Void
					continue
				for i : typ.TypeCount
				{
					switch typ.BaseType
					{
						case VType_Half
							assert(false)
							//asHalf := from->{half^}
							//preRet[preRetI] = asHalf^
							//from = (asHalf + 1)->{u8^}
						case VType_Float
							asFloat := from->{float^}
							preRet^[preRetI] = asFloat^
							from = (asFloat[1]&)->{u8^}
						case void
							assert(false)
					}
					preRetI += 1
				}
			}
		}

		return preRet
	}
	GetVertSize := !() -> int
	{
		preRet := 0
		if (vertItems and_b MODEL_POSITION) != 0 preRet += PositionType.GetSize()
		if (vertItems and_b MODEL_NORMAL) != 0 preRet += NormalType.GetSize()
		if (vertItems and_b MODEL_UV) != 0 preRet += UVType.GetSize()

		return preRet
	}
	this := !() -> void
	{
		verts = null
		inds = null
		vertItems = 0
	}
	// SaveAsMF1 := !(char^ flName) -> void
	// {
	// 	vertSize := VertexCount*GetVertSize()
	// 	indSize := IndexCount*IndexType.GetSize()
	// 	fileSize := vertSize + indSize + 8*4

	// 	outFile := MappedFile(flName,FILE_CREATE,fileSize)
	// 	defer outFile.Close()

	// 	outData := outFile.Get()->{u32^}
	// 	outData[0] = 0 //BlockType
	// 	outData[1] = VertexCount
	// 	outData[2] = PositionType.ToU32()
	// 	outData[3] = NormalType.ToU32()
	// 	outData[4] = UVType.ToU32()
	// 	outData[5] = 0 //animation index?
	// 	outData[6] = IndexCount
	// 	outData[7] = IndexType.ToU32()

	// 	toWr := outData[8]&->{u8^}
	// 	memcpy(toWr,verts,vertSize)

	// 	toWr = toWr[vertSize]&
	// 	memcpy(toWr,inds,indSize)
	// }
	// MapFromMF1 := !(void^ flP,u64 itSize) -> bool
	// {
	// 	itData := flP->{int^}
	// 	VertexCount = itData[1]
	// 	IndexCount = itData[6]
	// 	PositionType.FromU32(itData[2])
	// 	NormalType.FromU32(itData[3])
	// 	UVType.FromU32(itData[4])
	// 	vertSize := GetVertSize()*VertexCount
	// 	verts = @temp new u8[vertSize]
	// 	memcpy(verts,flP + 8*4,vertSize)
	// 	IndexType.FromU32(itData[7])
	// 	indSize := IndexType.GetSize()*IndexCount
	// 	inds = @temp new u8[indSize]
	// 	memcpy(inds,flP + (8*4 + vertSize),indSize)

	// 	vertItems = MODEL_POSITION + MODEL_NORMAL + MODEL_UV

	// 	return true
	// }
	LoadFromFile := !(File^ fl) -> bool
	{
		//ext := fl.GetName()[-3..0]
		mp := fl.GetMap()
		//defer fl.Unmap()
		return MapFromPLY(mp.Get(),mp.Size())
		//if ext == "ply" return MapFromPLY(ptr,fl.Size())
		//if ext == "mf1" return MapFromMF1(ptr,fl.Size())
		return false
	}
	// LoadFromFile := !(char^ flName) -> bool
	// {
	// 	fl := MappedFile(flName)
	// 	defer fl.Close()

	// 	if flName[-3..0] == "ply"
	// 	{
	// 		return MapFromPLY(fl.Get(),fl.Size()->{u64})
	// 	}else if flName[-3..0] == "mf1"{
	// 		return MapFromMF1(fl.Get(),fl.Size()->{u64})
	// 	}
	// 	return false
	// }
	MapFromPLY := !(void^ flP,u64 itSize) -> bool
	{
		daFile := flP->{u8^}

		fileAsString := StringSpan(flP->{char^},itSize)

		vertCount := int
		vertArray := new Vector.{float}
		preInd := new List.{int}

		fileAsString.DivideStr("\n", (line) ==> [c = preInd]{
		
			stage1 := true
			while stage1
			{
				switch line.Start
				{
				case "property float"
					switch line[15]
					{
					case 'x' vertItems = vertItems or_b MODEL_POSITION
					case 'n' vertItems = vertItems or_b MODEL_NORMAL
					case 's' vertItems = vertItems or_b MODEL_UV
					}
				case "element vertex"
					line.DivideStr(" ", vl ==> {
						yield void
						yield void
						vertCount = vl.ToInt()
					})
				case "end_header"
					stage1 = false
				}
				yield void
			}
			vertSize := 0

			if (vertItems and_b MODEL_POSITION) != 0
			{
				PositionType = VKType(VType_Float,3)
				vertSize += 3
			}
			if (vertItems and_b MODEL_NORMAL) != 0
			{
				NormalType = VKType(VType_Float,3)
				vertSize += 3
			}
			if (vertItems and_b MODEL_UV) != 0
			{
				UVType = VKType(VType_Float,2)
				vertSize += 2
			}

			assert(vertItems == 7) //TODO: normalless support

			vertArray.Resize(vertCount*vertSize)
			vertPtr := vertArray.GetPointer()

			j := 0
			for i : vertCount
			{
				line.DivideStr(" ", sub ==> {
					vertPtr[j] = ToFloat(sub)
					j += 1
				})
				yield void
			}

			while true
			{
				line.DivideStr(" " sub ==> [c2 = c]{
					val := sub.ToInt()

					datas := int[4]

					for i : val
					{
						yield void
						datas[i] = sub.ToInt()
					}

					c2.Push(datas[0])
					c2.Push(datas[1])
					c2.Push(datas[2])

					if val == 4 {
						c2.Push(datas[0])
						c2.Push(datas[2])
						c2.Push(datas[3])
					}
					
				})
				yield void
			}
		})

		VertexCount = vertCount

		verts = malloc(vertArray.Size()*4)
		memcpy(verts,vertArray.GetPointer(),vertArray.Size()*4)

		preIndsRaw := malloc(preInd.Size()*4)->{int^}
		for it , i : preInd
			preIndsRaw[i] = it
		inds = preIndsRaw
		IndexType = VKType(VType_UInt32,1)
		IndexCount = preInd.Size()

		return true
	}

	GetIndsU32 := !() -> u32[]
	{
		switch IndexType.BaseType
		{
		case VType_UInt32
				ret := new Vector.{u32}(IndexCount)
				asU32 := inds->{u32^}
				ret^[^i] = asU32[i]
				return ret
		case VType_UInt16
			assert(false)
			//{
			//	asU16 := inds->{u16[]}
			//	preRet := @temp new u32[asU16->len]
			//	preRet[^i] = asU16[i]
			//	return preRet
			//}
		case VType_UInt8
			//{
			//	asU8 := inds->{int^}
			//	preRet := new Vector.{u32}(asU8.Size())
			//	preRet[^i] = asU8[i]
			//	return preRet
			//}
		}
		assert(false)
		return null->{u32[]}
	}
	IndsRefit := !() -> void
	{
		if IndexType.BaseType == VType_UInt16
			return void
		assert(IndexType.BaseType == VType_UInt32)
		asU32 := inds->{u32[]}
		
		if asU32[^] >= 65535
			return void

		//Transforming to U16
		itU16 := @temp new u16[asU32->len]
		itU16[^i] = asU32[i]
		inds = itU16
		IndexType = VKType(VType_UInt16,1)
	}
	// CheckSupport := !() -> void
	// {
	// 	if not vkHalfFloatSupport
	// 	{
	// 		ReVert(x ==> {
	// 			if x[^].BaseType == VType_Half
	// 				it.BaseType = VType_Float
	// 		})
	// 	}
	// }
	// ReVert := !( !(VKType[])&->void conf ) -> void
	// {
	// 	preSet := @temp new VKType[3]
	// 	preSet[0] = PositionType
	// 	preSet[1] = NormalType
	// 	preSet[2] = UVType

	// 	conf(preSet)

	// 	changed := false
	// 	changed = changed or preSet[0] != PositionType
	// 	changed = changed or preSet[1] != NormalType
	// 	changed = changed or preSet[2] != UVType

	// 	if not changed
	// 		return void

	// 	conf(preSet)

	// 	if PositionType.BaseType == VType_Void preSet[0] = VKType(VType_Void,0)
	// 	if NormalType.BaseType == VType_Void preSet[1] = VKType(VType_Void,0)
	// 	if UVType.BaseType == VType_Void preSet[2] = VKType(VType_Void,0)

	// 	itVerts := GetVertAsFloat()

	// 	sumSize := 0
	// 	sumSize += preSet[^].GetSize()

	// 	preRet := @temp new u8[sumSize*VertexCount]
	// 	resIter := preRet[0]&

	// 	vInd := 0
	// 	for i : VertexCount
	// 	{
	// 		for it : preSet
	// 		{
	// 			if it.BaseType == VType_Void
	// 				continue
	// 			for j : it.TypeCount
	// 			{
	// 				switch it.BaseType
	// 				{
	// 					case VType_Half
	// 						asHalf := resIter->{half^}
	// 						asHalf^ = itVerts[vInd]
	// 						resIter = asHalf[1]&->{u8^}
	// 					case VType_Float
	// 						asFloat := resIter->{float^}
	// 						asFloat^ = itVerts[vInd]
	// 						resIter = asFloat[1]&->{u8^}
	// 					case void
	// 						assert(false)
	// 				}
	// 				vInd += 1
	// 			}
	// 		}
	// 	}
	// 	verts = preRet
	// 	PositionType = preSet[0]
	// 	NormalType = preSet[1]
	// 	UVType = preSet[2]
	// }

}




