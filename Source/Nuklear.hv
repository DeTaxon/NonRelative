
nuklearC := NuklearVulkanContext^

NuklearTestInit := !() -> void
{
	nuklearC = new NuklearVulkanContext

	nuklearC.Init(vk)

	nuklearContext = nuklearC.itContext //calloc(1,nk_context_size())
	atlasImage = nuklearC.atlasTexture

	rect := nk_rect//(10,10,100,100)
	rect.x = 100
	rect.y = 100
	rect.w = 250
	rect.h = 250
	if nk_begin(nuklearContext,"HI",rect,NK_WINDOW_MOVABLE + NK_WINDOW_BORDER + NK_WINDOW_CLOSABLE) != 0
	{
		nk_layout_row_dynamic(nuklearContext,30,1)
		nk_label(nuklearContext,"test",0x11)
	}
	nk_end(nuklearContext)


}

nuklearContext := void^

canvasProp := vProp^
atlasImage := TVkTexture^

NuklearCreateStep := !() -> void
{
	nuklearC.RenderStep()

	gNuklearLayout = engine.lightRenderPass.CreateLayout(![
		VKType(VType_Float,2),
		VKType(VType_Float,2),
		VKType(VType_UInt8,4)
	],![
		new TImageSet(1)
	],![],
	1
	)

	textShader = gNuklearLayout.CreateShader(FSGetFile("text.vert"),FSGetFile("text.frag"))

	nuklearPool = gNuklearLayout.CreateDescriptorPool(0,100)
	nuklearDescp = nuklearPool.CreateDescriptor()
	
	vSetTexture(nuklearDescp,atlasImage,gSamplerNearest)
}


nuklearVertex := TVkMemBuffer^
nuklearIndex := TVkMemBuffer^

gNuklearLayout := TShaderInput^
textShader := vShader^ 

nuklearPool := TDescriptorPool^ 
nuklearDescp := VkDescriptorSet

NuklearDrawStep := !(VkCommandBuffer cmdB) -> void
{
	offsets := VkDeviceSize

	textShader.ApplyShaderToQueue(cmdB)

	sts := VkDescriptorSet[1]
	sts[0] = nuklearDescp
	vk.Funcs.vkCmdBindDescriptorSets(cmdB,VK_PIPELINE_BIND_POINT_GRAPHICS,gNuklearLayout.Get(),0,1,sts[0]&,0,null)

	nuklearC.Draw(cmdB)
}

