vCamera := class
{
	upDownAng := float
	leftRightAng := float
	camPos := vec4f
	camNear := float
	camFar := float
	camPOV := float

	perspConsts := float[4]
	memConstInfo := VulkanMemoryInfo^

	mouseCamX := double
	mouseCamY := double

	this := !() -> void
	{
		upDownAng = 0.0f
		leftRightAng = 0.0f
		camPos.w = 1.0f
		//vkPerspMem.CreateObject(4*4,true)
		mouseCamX = win.MouseX
		mouseCamY = win.MouseY
	}

	AddAngs := !(float lrA, float udA) -> void
	{
		upDownAng +=  udA
		leftRightAng += lrA

		fullSpin := 360deg
		almostSpin := 300deg
		if leftRightAng > almostSpin leftRightAng -= fullSpin
		if leftRightAng < -almostSpin leftRightAng += fullSpin

		limit := 89deg
		if upDownAng > limit
		{
			upDownAng = limit
		}
			
		//upDownAng = min(upDownAng,-limit)
		if upDownAng < -limit 
		{
			upDownAng = -limit
		}
	}
	
	vkPerspMem := TVkMemBuffer^

	UpdatePerspective := !(float w, float h) -> void
	{
		aspect := w / h
		fovTM := 1.0f / tanf(camPOV*0.5f)
		range := camFar - camNear

		perspConsts[0] = fovTM / aspect
		perspConsts[1] = fovTM
		perspConsts[2] = (camFar + camNear) / range
		perspConsts[3] = 2.0*(camFar*camNear/range)

		vkPerspMem.TransferData(ArraySpan.{u8}(perspConsts[0]&->{u8^}, 4*4)) //TODO
	}

	SetPerspective := !(float w, float h, float near, float far, float pov) -> void
	{
		camNear = near
		camFar = far
		camPOV = pov

		vkPerspMem = vk.CreateMemBufferObject(4*4,VK_BUFFER_USAGE_VERTEX_BUFFER_BIT or_b VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT or_b VK_BUFFER_USAGE_TRANSFER_DST_BIT)

		bufInfo := VkDescriptorBufferInfo
		bufInfo.buffer = vkPerspMem.itBuffer
		bufInfo.offset = 0
		bufInfo.range = 4*4
		someWrite := VkWriteDescriptorSet()
		someWrite.dstSet = vkPerspSet
		someWrite.dstBinding = 0
		someWrite.dstArrayElement = 0
		someWrite.descriptorCount = 1
		someWrite.descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER
		someWrite.pBufferInfo&->{void^^}^ = bufInfo&

		vk.Funcs.vkUpdateDescriptorSets(vk.LogicalDevice,1,someWrite&,0,null)

		UpdatePerspective(w,h)
	}
	
	camQuant := !() -> quantf
	{
		return quantfAt(0.0f,0.0f,1.0f,-leftRightAng)<*>quantfAt(0.0f,1.0f,0.0f,upDownAng)
	}
	addLocal := !(vec4f diffAdd) -> void
	{
		rotQ := camQuant()

		oldW := camPos.w
		newAt := rotQ*diffAdd
		camPos += newAt
		camPos.w = oldW
	}
	ApplyCamera := !(centf propPos, centf posRes) -> void
	{
		tempCent := centf
		tempCent.ang = camQuant()
		tempCent.pos = camPos

		invC := tempCent.Inverse()
		posRes = invC<*>propPos
	}
	BindDescriptor := !(VkCommandBuffer cmdB) -> void
	{
		vk.Funcs.vkCmdBindDescriptorSets(cmdB,VK_PIPELINE_BIND_POINT_GRAPHICS,gModelLayout.Get(),0,1,vkPerspSet&,0,null) //TODO remove vk.Funcs
	}
	InputCheck := !(GLFWWindow^ win,double deltaTime, bool applyMove = true) -> void
	{
		if not applyMove
		{
			mouseCamX = win.MouseX
			mouseCamY = win.MouseY
			return void
		}

		walkM := 0.5f
		addLR := 0.0f
		addFB := 0.0f
		walkTime := deltaTime
		if buttons['S'] walkTime *= 3.5
		if buttons['a'] addLR =  walkM*walkTime
		if buttons['d'] addLR = -walkM*walkTime
		if buttons['w'] addFB =  walkM*walkTime
		if buttons['s'] addFB = -walkM*walkTime
		if buttons['q'] AddAngs(-deltaTime*0.5f,0.0f)
		if buttons['e'] AddAngs( deltaTime*0.5f,0.0f)
		if buttons['r'] AddAngs(0.0f, deltaTime*0.5f)
		if buttons['f'] AddAngs(0.0f,-deltaTime*0.5f)

		msXDiff := win.MouseX - mouseCamX
		msYDiff := win.MouseY - mouseCamY
		mouseCamX = win.MouseX
		mouseCamY = win.MouseY
		mouseSense := 0.4
		AddAngs(deltaTime*msXDiff*mouseSense,deltaTime*msYDiff*mouseSense)
		addLocal(vec4f(addFB,addLR,0.0f,0.0f))
	}
}

