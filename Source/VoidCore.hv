
gSamplerNearest := VkSampler
gSamplerLinear := VkSampler

gObjectLayoutSets := VkDescriptorPool

VoidCoreInit := !() -> void
{
	vk.initCreateStageMemory()

	poolSize := u32[2] 
	poolSize[0] = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER
	poolSize[1] = 100 //TODO: size, add dynamicly

	nPool := VkDescriptorPoolCreateInfo()
	nPool.maxSets = 100
	nPool.poolSizeCount = 1
	nPool.pPoolSizes&->{void^^}^ = poolSize&->{void^}

	vk.Funcs.vkCreateDescriptorPool(vkLogCard,nPool&,null,gObjectLayoutSets&)

	imV := VkSamplerCreateInfo()
	imV.magFilter = VK_FILTER_NEAREST
	imV.minFilter = VK_FILTER_NEAREST
	imV.mipmapMode = VK_SAMPLER_MIPMAP_MODE_NEAREST
	imV.addressModeU = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE
	imV.addressModeV = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE
	imV.addressModeW = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE
	//imV.mpLodBias = 0.0f
	//imV.anisotropyEnable = VK_FALSE
	imV.maxAnisotropy = 1.0
	imV.compareEnable = VK_FALSE
	imV.compareOp = VK_COMPARE_OP_ALWAYS
	imV.minLod = 0.0
	imV.maxLod = 0.0
	imV.borderColor = VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK
	//imV.unnormalizedCoordinates = VK_FALSE

	vk.Funcs.vkCreateSampler(vkLogCard,imV&,null,gSamplerNearest&)
	imV.magFilter = VK_FILTER_LINEAR
	imV.minFilter = VK_FILTER_LINEAR
	vk.Funcs.vkCreateSampler(vkLogCard,imV&,null,gSamplerLinear&)
}

