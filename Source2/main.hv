
gRepo := vRepo^
LoadShaderModule := !(char^ name) -> vShaderModule^
{
	fil := gRepo.GetFile(name)
	filMap := fil.GetMap()

	result = new vShaderModule
	result.LoadShaderModule(filMap.Get(),filMap.Size())
}

main := !(char^[] args) -> int
{
	x := 900
	y := 900

	gRepo = new vRepo
	gRepo.Init(".")
	
	CreateWindow(x,y)
	VulkanInit()
	VoidCoreInit()
	CreateSwapchain(x,y)
	CreateFB()

	deferVert := LoadShaderModule("Shaders/ShaderCache/Defer.vert")
	deferFrag := LoadShaderModule("Shaders/ShaderCache/Defer.frag")
	gLightShader = new vShader
	gLightShader.LoadShaderLight(deferVert,deferFrag)

	// learnVert := LoadShaderModule("Shaders/ShaderCache/LearnVert.vert")
	learnVert := LoadShaderModule("Vert2.vert")
	learnFrag := LoadShaderModule("Shaders/ShaderCache/LearnFrag.frag")
	learnShader := new vShader
	opts := vShaderVertexOptions
	opts.positionType = VKType(VType_Float,3)
	opts.normalType = VKType(VType_Float,3)
	opts.textureType = VKType(VType_Float,2)
	learnShader.LoadShader(learnVert,learnFrag,opts&)

	mdl := new vModel
	fldFile := gRepo.GetFile("Maps/FirstMap2/FirstMap.ply")
	mdl.LoadFile(fldFile)

	txt := new vTexture
	txt.CreateTexture(gRepo.GetFile("Maps/FirstMap2/wut.webp"))

	cam := new vCamera()
	cam.SetPerspective(x,y,0.001,100,80deg)

	newSetCR := VkDescriptorSetAllocateInfo()
	newSetCR.descriptorPool = gObjectLayoutSets
	newSetCR.descriptorSetCount = 1
	newSetCR.pSetLayouts = vkPerObjectLayout&
	modelTextureSet := VkDescriptorSet

	vkAllocateDescriptorSets(vkLogCard,newSetCR&,modelTextureSet&)
	vSetTexture(modelTextureSet,txt,gSamplerNearest)

	itProp := new vProp()
	itProp.itModel = mdl
	itProp.modelTextureSet = modelTextureSet

	while true
	{
		cam.InputCheck(0.1f)
		DrawGetImage()
		StartDraw()

		learnShader.ApplyShaderToQueue(mainCmd.Get())
		cam.BindDescriptor(mainCmd.Get())

		if buttons['y']
		{
			cam.camPos.x = 0
			cam.camPos.y = 0
			cam.camPos.z = 2
			cam.upDownAng = 0.0f
			cam.leftRightAng = 0.0f
		}

		itProp.Draw(mainCmd,cam^)

		StopDraw()
		
		glfwSwapBuffers(glfwWindow)
		glfwPollEvents()
	}


	//while not glfwWindowShouldClose(win)
	//{
	//	glfwSwapBuffers(win)
	//	glfwPollEvents()
	//}
//
	//glfwTerminate()
	
	//return 0
}

